#!/bin/bash
#
# bootloop
#
#	This file should be located in /root/bin.
#
#	Puts the system in an infinite boot loop only terminated when
#	the script finds a file named "stop" in /root or when a crash
#	dump is detected as /etc/crash/vmcore.
#
#	To stop the bootloop without a crash dump, simply do the
#	following as root in the /root directory.
#
#		touch stop
#
#	The timeout before the next reboot is 2 minutes, so that
#	should be plenty enough time to create the stop file.
#

# Need path for script to run in cron
#
PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin

action="$@"	# action consists of all the parameters
stat=1
bootloopfile="/tmp/bootloop.log"
countdown=120

wall -n "pid: ""$$"

# If there's been a crash, then exit with nonzero status.
#
if [[ -e /var/crash/vmcore ]]; then
	wall -n "Core dump detected. Exiting bootloop."
	echo "Core dump detected. Exiting bootloop." >> $bootloopfile
	exit 1
fi

# If the bootloopfile exists, then update it, else create it and
# initialize it.
#
if [ -f $bootloopfile ]; then
	bootcount=$(cat $bootloopfile | cut -d':' -f2)
	bootcount=$(( bootcount + 1 ))
else
	echo "@reboot /root/bin/bootloop" | crontab
	bootcount=1
	> $bootloopfile
fi

wall -n "boot count: "$bootcount""
echo $bootcount >> $bootloopfile

if [ "$action" ]; then
	wall -n "Executing: "$action""
	echo "Executing: "$action"" >> $bootloopfile
	$action
	stat=$?
fi

# If "action" returns nonzero status, or if there was no "action"
# passed, then reboot. Default value of stat is 1, so it can
# only be 0 if an "action" was executed and it returned a 0.
#
wall -n "***************************************************************"
if [ $stat -ne 0 ]; then
	wall -n "Starting countdown for bootloop ..."

	for (( i=$countdown; i > 0; --i )); do
		(( $i % 20 )) || wall -n  " $i"
		sleep 1

		if [[ -e $HOME/stop ]]; then
			wall -n "\"stop\" file detected."
			wall -n "bootloop exiting ..."
			echo "\"stop\" file detected, bootloop exiting ..." \
				>> $bootloopfile
			crontab -l | grep -v '@reboot /root/bin/bootloop' | crontab -
			rm -vf /root/stop
			exit 1
		fi
	done

	wall -n " $i"
	wall -n "Rebooting now ..."
	wall -n "***************************************************************"
	shutdown -r now
else
	echo "\""$action"\" ..." 			>> $bootloopfile
	echo "Successfully executed." 			>> $bootloopfile
	echo "Boot loop halted." 			>> $bootloopfile
	echo "Number of boot loops: "$bootcount"" 	>> $bootloopfile
	echo "" 					>> $bootloopfile

	# Delete the crontab line that calls this script on reboot.
	#
	crontab -l | grep -v '@reboot /root/bin/bootloop' | crontab -

	wall -n "***************************************************************"
fi
