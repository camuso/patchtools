#!/bin/bash
#
# bootloop
#
#	This file should be located in /root/bin.
#
#	Puts the system in an infinite boot loop. The infinite boot
#	loop is accomplished by creating a cron job that calls this
#	script on every boot.
#
#	The infinite loop is terminated when any one of the following
#	conditions is met.
#
#	1. The script finds finds a file named "stop" in /root. The root
#	   user can simply type "touch stop" in the root directory to do
#	   this.
#
#	2. Root user can clear the cron job with "crontab -r". However,
#	   this will clear all of root's cron jobs. If there are no
#	   other cron jobs, this is not a problem. However if root has a
#	   number of cron jobs that you want to keep, use the following.
#
#	   crontab -l | grep -v '@reboot /root/bin/bootloop' | crontab -
#
#	3. A new crash dump is detected in /var/crash. At the beginning
#	   of the script, the current number of crash dumps is written
#	   to a file in the /tmp directory. On each reboot, that number
#	   is compared to a recalculaton of the number of files under
#	   the /var/crash directory. If the number has increased, then
#	   bootloop script will clear its cron job and exit.
#
#	The default timeout before the next reboot is 20 seconds, but
#	that can be changed by modifying the countdown variable below.
#

countdown=20

# Need path for script to run in cron
#
PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin

action="$@"	# action consists of all the parameters
stat=1
bootloopfile="/tmp/bootloop.log"
rebootlogfile="/root/reboot.log"
crashcountfile="/tmp/crashcount.log"
crashcount=$(ls /var/crash/* | wc -l)

# Find the serial console
# If we can't find an active console, direct output to /dev/null
#
console=$(cat /proc/tty/driver/serial | grep RTS | grep CTS | grep DTR)
if [[ $console ]]; then
	console="/dev/ttyS"$(echo $console | cut -d':' -f1)
else
	console="/dev/null"
fi

# putcon() - ouput to serial console
#
# 	Write strings to the console and optionally write the same
# 	string to a file.
#
# $1 - the string
# $2 - optional file
# $3 - new, any string in this argument will cause the file to be
#	opened for writing, which deletes the previous contents.
#
putcon()
{
	echo -e "$1" > $console
	if [[ $2 ]]; then
		if [[ $3 ]]; then
			echo -e "$1" > $2
		else
			echo -e "$1" >> $2
		fi
	fi
}

putcon "bootloop pid: ""$$"

# If the bootloopfile exists, then update it, else create it and
# initialize it.
# Else, create the cron job for the bootloop. initialize the bootcount,
# and create the bootloop file and the crashcountfile.
#
if [ -f $bootloopfile ]; then
	bootcount=$(( $(cat $bootloopfile | cut -d':' -f2) + 1 ))
else
	echo "@reboot /root/bin/bootloop" | crontab
	bootcount=1
	> $bootloopfile
	echo $crashcount > $crashcountfile
fi

putcon "boot count: "$bootcount"" $bootloopfile new
echo $(cat $bootloopfile) > $rebootlogfile

# If there's been a crash, then exit with nonzero status.
# We can tell there's been a crash if there are any files under
# /var/crash.
#
oldcount=$(cat $crashcountfile)
if [[ $crashcount != $oldcount ]]; then
	putcon "New core dump detected. Exiting bootloop." $rebootlogfile
	crontab -l | grep -v '@reboot /root/bin/bootloop' | crontab -
	exit 1
fi

if [ "$action" ]; then
	# wall -n "Executing: "$action""
	putcon "Executing: "$action"" $bootloopfile
	$action
	stat=$?
fi

# If "action" returns nonzero status, or if there was no "action"
# passed, then reboot. Default value of stat is 1, so it can
# only be 0 if an "action" was executed and it returned a 0.
#
if [ $stat -ne 0 ]; then
	putcon "Starting countdown for bootloop ..."

	for (( i=$countdown; i > 0; --i )); do
		# (( $i % 20 )) || wall -n  " $i"
		(( $i % 20 )) || putcon " $i"
		sleep 1

		if [[ -e $HOME/stop ]]; then
			putcon "\"stop\" file detected.\nbootloop exiting ...\n" $rebootlogfile
			crontab -l | grep -v '@reboot /root/bin/bootloop' | crontab -
			rm -vf /root/stop
			exit 1
		fi
	done

	putcon " $i\nRebooting now ..."
	shutdown -r now
else
	putcon "\""$action"\" ... Successfully executed." $rebootlogfile
	putcon "Boot loop halted." $rebootlogfile
	putcon "Number of boot loops: "$bootcount"\n" $rebootlogfile

	# Delete the crontab line that calls this script on reboot.
	#
	crontab -l | grep -v '@reboot /root/bin/bootloop' | crontab -
fi
