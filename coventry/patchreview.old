#!/bin/bash
#
# patchreview
#
# This script assumes that you have already extracted your patches into
# the $TEMPDIR (see .bashrc).
# In mutt, tag the thread you want to extract with esc-t, then extract
# the thread into text files using ;-esc-C (uppercase C). When prompted
# for the directory, type $TEMPDIR or uparrow to the previous save.
#

continueprompt="Continue? (y/n) :"
exitok="\nBye ...\n"
exitgitam="Something musta gone wrong with your git-am"

function buhbye {
	local exitstr=$1
	local exitfun=$2
	echo -e "$exitstr"
	exit 0
}

function getyn {
	local promptstring=$1
	local answer
	while true; do
		echo -en "$promptstring (y/n): "
		read -n1 answer
		echo
		[ "$answer" == "y" ] && break
		[ "$answer" == "n" ] && break
		[ "$answer" == "q" ] && buhbye "$exitok"
		[ "$answer" == "x" ] && buhbye "$exitok"
	done
	[ $# -eq 2 ] && eval ${2}=${answer}
}

function doyn {
	local promptstring="$1"
	local y_command="$2"
	local n_command="$3"
	local response
	getyn "$promptstring" response
	[ $# -lt 3 ] && n_command=""
	[ "$response" == "y" ] && $y_command
	[ "$response" == "n" ] && $n_command
	[ $# -eq 4 ] && eval $4=$response
}

function getuser {
	local promptstring="$1"
	read -p "$promptstring" var
	eval $2=$var
}

usdir="../temp"

echo
echo "Patch Review"
echo
echo "Assumptions:"
echo -e "\t. RHEL patches were saved in "$TEMPDIR""
echo -e "\t. Upstream patchset will be saved in "$usdir""
echo
echo "Press \"q\" or \"x\" at any \"(y/n)\" prompt to exit"
echo

# Save the current git HEAD in ../githead
#
doyn "Save the current git head?" githead

# Rename the files in $TEMPDIR to something-xx.yy.patch
#
getyn "Rename files in $TEMPDIR?" ans
if [ "$ans" == "y" ]; then
	getuser "Prefix to rename files in "$TEMPDIR": " pfx
	echo "Renaming files ..."
	renpat "$TEMPDIR"/cur "$pfx"
fi

# Apply the patches ...
# If something goes wrong, this is a good place to exit.
#
getyn "Apply the patches?" ans
if [ "$ans" == "y" ]; then
	git am $TEMPDIR/cur/*
	getyn "Do you have conflicts to fix?" conflicts
	if [ "$conflicts" == "y" ]; then
		doyn "Do you want to abort the git-am?" "git am --abort"
		buhbye "Exiting to fix conflicts ..."
	fi
fi

# Generate a patch set from the original upstream patches.
#
getyn "Generate a patch set from the upstream commits?" ans
[ "$ans" == "y" ] && genpatset "$usdir"

# Compare the upstream and RHEL patches.
#
doyn "\nCompare the upstream patchset in "$usdir" with the RHEL patchset in\n\
\t"$TEMPDIR" now?" "patcmp "$TEMPDIR"/cur "$usdir""

# Done with the patch review
#
 doyn "Delete the patches in "$TEMPDIR"cur/*?" "rm -vf "$TEMPDIR"cur/*"
 doyn "Delete the patches in "$usdir"?" "rm -vf "$usdir"/*"
echo
echo "The head of the git tree before you started patchreview was ..."
git log --pretty -n1 $(cat ../githead)
doyn "Reset the git head to the one you started with?" \
	"git reset --hard $(cat ../githead)"
echo
