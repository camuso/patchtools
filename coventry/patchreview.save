#!/bin/bash
#
# patchreview
#
# This script assumes that you have already extracted your patches into
# the $TEMPDIR (see .bashrc).
# In mutt, tag the thread you want to extract with esc-t, then extract
# the thread into text files using ;-esc-C (uppercase C). When prompted
# for the directory, type $TEMPDIR or uparrow to the previous save.
#

# This script needs a bash library source file
#
# functions in ~/bin/lib/ui.source
#	buhbye	- exit function
#	getyn	- prompt user for y or n
#	doyn	- prompt user for y or n and execute a command
#	getuser - prompt the user for a string
#	chkdir	- check whether the passed string exists as a file or dir
#	getdir	- get a directory name
#	backout - backs out of spawned shells
#
source ~/bin/lib/ui.source


continueprompt="Continue? (y/n) :"
exitok="\nBye ...\n"
usdir="../temp"

echo
echo "Patch Review"
echo
echo "Assumptions:"
echo -e "\t. RHEL patches were saved in "$TEMPDIR""
echo -e "\t. Upstream patchset will be saved in "$usdir""
echo
echo "Press \"q\" to quit or \"x\" to spawn a new shell at any \"(y/n)\" prompt."
echo

# Rename the files in $TEMPDIR to something-xx.yy.patch
#
getyn "Rename files in $TEMPDIR?" ans
if [ "$ans" == "y" ]; then
	getuser "Prefix to rename files in "$TEMPDIR": " pfx
	echo "Renaming files ..."
	renpat "$TEMPDIR"/cur "$pfx"
fi

# Apply the patches ...
# If something goes wrong, spawn a shell.
#
getyn "Apply the patches?" ans
if [ "$ans" == "y" ]; then
	git am $TEMPDIR/cur/*
	getyn "Do you have conflicts to fix?" conflicts
	if [ "$conflicts" == "y" ]; then
		doyn "Do you want to abort the git-am?" "git am --abort"
		echo "Spawning a new shell so you can edit conflicts."
		echo "Type \"exit\" or \"ctrl-D\" to return here."
		bash
	fi
fi

# Generate a patch set from the original upstream patches.
#
getyn "Generate a patch set from the upstream commits?" ans
[ "$ans" == "y" ] && genpatset "$usdir"

# Compare the upstream and RHEL patches.
#
doyn "\nCompare the upstream patchset in "$usdir" with the RHEL patchset in\n\
\t"$TEMPDIR" now?" "patcmp "$TEMPDIR"/cur "$usdir""

# Done with the patch review
#
 doyn "Delete the patches in "$TEMPDIR"cur/*?" "rm -vf "$TEMPDIR"cur/*"
 doyn "Delete the patches in "$usdir"?" "rm -vf "$usdir"/*"
echo
echo "The head of the git tree before you started patchreview was ..."
git log --pretty -n1 $(cat .git/ORIG_HEAD)
doyn "Reset the git head to the one you started with?" \
	"git reset --hard $(cat .git/ORIG_HEAD)"

backout 3
echo
echo "patchreview done"
echo
