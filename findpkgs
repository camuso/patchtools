#!/bin/bash
#
# findpkgs
#

# Use unset in case these have been set elsewhere.
unset BLD && declare BLD="[1m"
unset UND && declare UND="[4m"
unset OFF && declare OFF="[0m"

# Contlol-C exit code
# see http://www.tldp.org/LDP/abs/html/exitcodes.html
unset CTLC_EXIT &&  declare -i CTLC_EXIT=130

# Other exit codes
declare -i EXIT_OK=0
declare -i EXIT_INVARG=1
declare -i EXIT_INVFIL=2
declare -i EXIT_INVDIR=3

declare -a exitmsgary=(
""
"Invalid number of arguments."
" is an invalid filename."
" is an invalid directory name."
)

exitme() {
	local exitval=$1
	local strarg=""
	local exitmsg

	if ([ $exitval -ne $EXIT_OK ] && [ $exitval -ne $CTLC_EXIT ]); then
		[ $# -eq 2 ] && strarg=$2
		[ ${#exitmsgary[@]} -gt $exitval ] \
			&& exitmsg="${exitmsgary[$exitval]}"

		echo -e "$BLD$strarg$exitmsg$OFF"

		[ $exitval -ne 0 ] && echo -e \
			"Type$BLD findpkgs -h$OFF for help."
	fi

	exit $exitval
}

# run if user hits control-c
#
control_c()
{
	echo -en "
Ctrl-c detected
Cleaning up and exiting.
"
	exitme $CTLC_EXIT
}


declare -i optcount=0

declare usagestr=$(
cat <<EOF

$(basename $0) [options] pkglist

Description:

  This script will crawl the RHEL7 and RHE8 latest builds and look for
  packages listed in the pkglist argument. The links to the top of the
  most recent builds are...

  RHEL7: http://download.eng.bos.redhat.com/rel-eng/latest-RHEL-7/compose/
  RHEL8: http://download-node-02.eng.bos.redhat.com/rel-eng/latest-RHEL-8/compose/

Arguments:
  pkglist - This is a file containing a list of packages to seek.

Options:
  -h  - Prints this help text to the terminal.

\0
EOF
)

usage() {
	echo -en "$usagestr"
	exitme 0
}

declare rh7link="http://download.eng.bos.redhat.com/rel-eng/latest-RHEL-7/compose"
declare rh8link="http://download-node-02.eng.bos.redhat.com/rel-eng/latest-RHEL-8/compose"
declare pkg="os/Packages"

declare -a rh8stream=(
"AppStream"
"BaseOS"
"CRB"
"HighAvailability"
"NFV"
"RT"
"ResilientStorage"
)
declare -i rh8streamsiz=${#rh8stream[@]}

declare -a rh7stream=(
"Client-optional"
"Client"
"ComputeNode-optional"
"ComputeNode"
"Server-NFV"
"Server-RT"
"Server-SAP"
"Server-SAPHANA"
"Server-optional"
"Server"
"Workstation-optional"
"Workstation"
)
declare -i rh7streamsiz=${#rh7stream[@]}

declare -a rh7arch=(
"x86_64"
"ppc64"
"ppc64le"
"s390x"
)
declare -i rh7archsiz=${#rh7arch[@]}

declare -a rh8arch=(
"x86_64"
"ppc64le"
"s390x"
"aarch64"
)
declare -i rh8archsiz=${#rh8arch[@]}

declare hcmd="elinks -dump -no-references"

getpkglist() {
	local distro="$1"
	local stream="$2"
	local arch="$3"
	local link

	[ $distro -eq 7 ] && link="$rh7link"
	[ $distro -eq 8 ] && link="$rh8link"

	subdir=$stream/$arch/$pkg
	dir=/tmp/rh$distro/$subdir
	[ -d $dir ] || mkdir -p $dir
	$hcmd $link/$subdir > $dir/pkglist
	echo "RHEL$distro $dir/pkglist"
}

buildtrees() {

	for ((j = 0; j < $rh7streamsiz; ++j)); do

		stream=${rh7stream[$j]}

		if [[ $stream == "Server" ]]          || \
		   [[ $stream == "Server-optional" ]]
		then
			for ((k = 0; k < $rh7archsiz; ++k)); do
				getpkglist 7 $stream ${rh7arch[$k]}
			done
		else
			getpkglist 7 $stream "x86_64"
		fi
	done

	echo

	for ((j = 0; j < $rh8streamsiz; ++j)); do

		stream=${rh8stream[$j]}

		if [[ $stream == "AppStream" ]] || \
		   [[ $stream == "BaseOS" ]]    || \
		   [[ $stream == "CRB" ]]
		then
			for ((k = 0; k < $rh8archsiz; ++k)); do
				getpkglist 8 $stream ${rh8arch[k]}
			done
		elif [[ $stream == "HighAvailability" ]] ||
		     [[ $stream == "ResilientStorage" ]]
		then
			for ((k = 0; k < ($rh8archsiz - 1); ++k)); do
				getpkglist 8 $stream ${rh8arch[k]}
			done
		else
			getpkglist 8 $stream "x86_64"
		fi
	done
}

parse_pkglist() {
	local pkglist="$1"

	while read line; do
		echo $line
		grep -q -r -m1 $line /tmp/rh7
		
	done < $pkglist
}


main() {
        # Trap for control-c
        trap control_c SIGINT

	declare pkglist

	declare rh8BaseOS="$rh8link""BaseOS/"
	while getopts h OPTION; do
    	    case "$OPTION" in
		h ) usage
		    exitme 0
		    ;;
		* ) echo "unrecognized option -$OPTION"
		    echo -e "$usagestr"
		    exit 127
	    esac
	done

	shift $optcount
	[ $# -eq 1 ] || exitme $EXIT_INVARG

	pkglist="$1"
	[ -f $pkglist ] || exitme $EXIT_INVFIL

	buildtrees
	parse_pkglist $pkglist

	exitme $EXIT_OK
}

main $@

exitme $EXIT_OK

