#!/bin/bash
#
# findpkgs
#

# Use unset in case these have been set elsewhere.
unset BLD && declare BLD="[1m"
unset UND && declare UND="[4m"
unset OFF && declare OFF="[0m"

# Contlol-C exit code
# see http://www.tldp.org/LDP/abs/html/exitcodes.html
unset CTLC_EXIT &&  declare -i CTLC_EXIT=130

# Other exit codes
declare -i EXIT_OK=0
declare -i EXIT_INVARG=1
declare -i EXIT_INVFIL=2
declare -i EXIT_INVDIR=3

declare -a exitmsgary=(
""
"Invalid number of arguments."
" is an invalid filename."
" is an invalid directory name."
)

exitme() {
	local exitval=$1
	local strarg=""
	local exitmsg

	if ([ $exitval -ne $EXIT_OK ] && [ $exitval -ne $CTLC_EXIT ]); then
		[ $# -eq 2 ] && strarg=$2
		[ ${#exitmsgary[@]} -gt $exitval ] \
			&& exitmsg="${exitmsgary[$exitval]}"

		echo -e "$BLD$strarg$exitmsg$OFF"

		[ $exitval -ne 0 ] && echo -e \
			"Type$BLD findpkgs -h$OFF for help."
	fi

	exit $exitval
}

# run if user hits control-c
#
control_c()
{
	echo -en "
Ctrl-c detected
Cleaning up and exiting.
"
	exitme $CTLC_EXIT
}


declare -i optcount=0

declare usagestr=$(
cat <<EOF

$(basename $0) [options] pkglist

Description:

  This script will crawl the RHEL7 and RHE8 latest builds and look for
  packages listed in the pkglist argument. The links to the top of the
  most recent builds are...

  RHEL7: http://download.eng.bos.redhat.com/rel-eng/latest-RHEL-7/compose/
  RHEL8: http://download-node-02.eng.bos.redhat.com/rel-eng/latest-RHEL-8/compose/

Arguments:
  pkglist - This is a file containing a list of packages to seek.
            Use the getpkglist script to create this list.

Options:
  -a  - List arches along with the directories
  -b  - Builds the RHEL7 and RHEL8 distro directory trees.
  -h  - Prints this help text to the terminal.

\0
EOF
)

usage() {
	echo -en "$usagestr"
	exitme 0
}

declare b_buildtrees=false
declare b_arches=false
declare rh7link="http://download.eng.bos.redhat.com/rel-eng/latest-RHEL-7/compose"
declare rh8link="http://download-node-02.eng.bos.redhat.com/rel-eng/latest-RHEL-8/compose"
declare br7link="http://download.devel.redhat.com/brewroot/repos/rhel-7.0-build/latest/x86_64/pkglist"
declare br8link="http://download.devel.redhat.com/brewroot/repos/rhel-8.0-build/latest/x86_64/pkglist"
declare pkg="os/Packages"

declare -a rh8stream=(
"AppStream"
"BaseOS"
"CRB"
"HighAvailability"
"NFV"
"RT"
"ResilientStorage"
)
declare -i rh8streamsiz=${#rh8stream[@]}

declare -a rh7stream=(
"Client-optional"
"Client"
"ComputeNode-optional"
"ComputeNode"
"Server-NFV"
"Server-RT"
"Server-SAP"
"Server-SAPHANA"
"Server-optional"
"Server"
"Workstation-optional"
"Workstation"
)
declare -i rh7streamsiz=${#rh7stream[@]}

declare -a rh7arch=(
"x86_64"
"ppc64"
"ppc64le"
"s390x"
)
declare -i rh7archsiz=${#rh7arch[@]}

declare -a rh8arch=(
"x86_64"
"ppc64le"
"s390x"
"aarch64"
)
declare -i rh8archsiz=${#rh8arch[@]}

declare hcmd="elinks -dump -no-references"

# ui_strtok - tokenizes a string and returns an array
#
# $1 - the string to tokenize
# $2 - the string of delimiters
# $3 - returns the tokenized string as an array
#
# examples:
#
# ui_strtok kernel-pegas-4.11.0-2.el7.x86_64 ".-" array
#
# ${array[@]} will contain all the tokens separated by delimiters "."
# and "-", and the delimiters will be replaced by spaces.
#
ui_strtok() {
	IFS="$2" read -r -a $3 <<< "$1"
}

# get_pkgname - extract the n from nvr
#
# Tokenize the package name.
# There are packages with names like this..
#
#   java-1.6.0-openjdk-demo-1.6.0.41-1.13.13.1.el7_3.x86_64.rpm
#
# ..where splitting on the last hyphen isn't good enough to isolate the
# package name.
#
# The last token is automatically dropped, since it's the distro and arch.
# It's the second to last token that must be examined. If it begins with a
# number, it will be dropped and all preceding tokens will be recombined to
# the package name.
#
get_pkgname(){
    local p="$1"
    local pary
    local pn
    local j
    local k
    local f

    ui_strtok "$p" "-" pary

    # We will always use the first token.
    #
    pn=${pary[0]}

    # Get the index to the second to last token. If its first char is a
    # number, then drop it and set the index to the previous token.
    #
    k=$((${#pary[@]} - 2))
    f=${pary[k]}
    [[ ${f:0:1} =~ ^-?[0-9]+$ ]] && let --k

    # Now get the remaining tokens.
    #
    for ((j = 1; j <= k; ++j)); do
	    pn="$pn""-""${pary[j]}"
    done

    eval $2="$pn"
}

clean_pkglist() {
	local path=$1
	local dir=$(dirname $path)
	local name
	local lary

	echo $path
	> $dir/tmp

	while read line; do
		[[ $line == *".rpm"* ]] || continue
		ui_strtok "$line" "] " lary
		line=${lary[3]}
		get_pkgname "$line" name
		echo $name >> $dir/tmp
	done < $path

	mv -f $dir/tmp $path
}

getpkglist() {
	local distro="$1"
	local stream="$2"
	local arch="$3"
	local link

	[ $distro -eq 7 ] && link="$rh7link"
	[ $distro -eq 8 ] && link="$rh8link"

	subdir=$stream/$arch/$pkg
	dir=/tmp/rh$distro/$subdir

	[ -d $dir ] || mkdir -p $dir

	$hcmd $link/$subdir > $dir/pkglist
	clean_pkglist "$dir/pkglist"
}


clean_brpkglist() {
	local path="$1"
	local name
	local tfil=/tmp/tfil

	echo $path
	> $tfil

	while read line; do
		[[ $line == *".rpm"* ]] || continue
		line=$(basename $line)
		get_pkgname "$line" name
		echo $name >> $tfil
	done < $path

	mv -f $tfil $path
}

get_brpkglist() {
	local distro="$1"
	dir="/tmp/rh$distro/BUILDROOT"
	local link

	[ $distro -eq 7 ] && link="$br7link"
	[ $distro -eq 8 ] && link="$br8link"

	[ -d $dir ] || mkdir -p $dir

	$hcmd $link > $dir/pkglist
	clean_brpkglist "$dir/pkglist"
}

buildtrees() {
	local j
	local k

	echo "RHEL7"
	echo "-----"

	get_brpkglist 7

	for ((j = 0; j < $rh7streamsiz; ++j)); do

		stream=${rh7stream[$j]}

		if [[ $stream == "Server" ]]          || \
		   [[ $stream == "Server-optional" ]]
		then
			for ((k = 0; k < $rh7archsiz; ++k)); do
				getpkglist 7 $stream ${rh7arch[$k]}
			done
		else
			getpkglist 7 $stream "x86_64"
		fi
	done

	echo

	echo "RHEL8"
	echo "-----"

	get_brpkglist 8

	for ((j = 0; j < $rh8streamsiz; ++j)); do

		stream=${rh8stream[$j]}

		if [[ $stream == "AppStream" ]] || \
		   [[ $stream == "BaseOS" ]]    || \
		   [[ $stream == "CRB" ]]
		then
			for ((k = 0; k < $rh8archsiz; ++k)); do
				getpkglist 8 $stream ${rh8arch[k]}
			done
		elif [[ $stream == "HighAvailability" ]] ||
		     [[ $stream == "ResilientStorage" ]]
		then
			for ((k = 0; k < ($rh8archsiz - 1); ++k)); do
				getpkglist 8 $stream ${rh8arch[k]}
			done
		else
			getpkglist 8 $stream "x86_64"
		fi
	done
}

process_stream() {
	local stream="$1"
	local s
	local sary
	local prev=

	while read s; do
		ui_strtok "$s" "/" sary

		if $b_arches; then
			printf "    RHEL-$distro %-21s%s\n" ${sary[3]} ${sary[4]}
		else
			if [[ $prev != ${sary[3]} ]]; then
				printf "    RHEL-$distro %-21s\n" ${sary[3]}
			fi
			prev="${sary[3]}"
		fi
	done <<< "$stream"

}

get_stream() {
	local distro=$1
	local pkg=$2
	local stream

	stream="$(grep -r -m1 "^$pkg$" /tmp/rh$distro)"
	if [ $? -eq 0 ]; then
		process_stream "$stream"
	else
		echo -e "    RHEL-$distro $pkg NOT FOUND"
	fi
}

parse_pkglist() {
	local pkglist="$1"
	local stream
	local line
	local lary
	local pkg
	local mnt

	while read line; do
		ui_strtok "$line" ":" lary
		pkg="${lary[0]}"
		mnt="${lary[1]}"
		printf "%-24s%s\n" $pkg $mnt
		#line=$(echo "$line" | cut -d':' -f1)
		#echo "$line"
		get_stream 7 "$pkg"
		get_stream 8 "$pkg"
		echo
	done < $pkglist
}


main() {
        # Trap for control-c
        trap control_c SIGINT

	declare pkglist

	while getopts abh OPTION; do
    	    case "$OPTION" in
		h ) usage
		    exitme 0
		    ;;
		a ) b_arches=true
		    let ++optcount
		    ;;
		b ) b_buildtrees=true
		    let ++optcount
		    ;;
		* ) echo "unrecognized option -$OPTION"
		    echo -e "$usagestr"
		    exit 127
	    esac
	done

	shift $optcount
	[ $# -eq 1 ] || exitme $EXIT_INVARG

	pkglist="$1"
	[ -f $pkglist ] || exitme $EXIT_INVFIL

	$b_buildtrees && buildtrees
	echo
	echo "List of Packages in Platform Enablement"
	echo "---------------------------------------"
	echo
	parse_pkglist $pkglist

	exitme $EXIT_OK
}

main $@

exitme $EXIT_OK

