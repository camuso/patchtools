#!/bin/bash
#
# findpkgs
#

# Use unset in case these have been set elsewhere.
unset BLD && declare BLD="[1m"
unset UND && declare UND="[4m"
unset OFF && declare OFF="[0m"

# Contlol-C exit code
# see http://www.tldp.org/LDP/abs/html/exitcodes.html
unset CTLC_EXIT &&  declare -i CTLC_EXIT=130

# Other exit codes
declare -i EXIT_OK=0
declare -i EXIT_INVARG=1
declare -i EXIT_INVFIL=2
declare -i EXIT_INVDIR=3

declare -a exitmsgary=(
""
"Invalid number of arguments."
" is an invalid filename."
" is an invalid directory name."
)

exitme() {
	local exitval=$1
	local strarg=""
	local exitmsg

	if ([ $exitval -ne $EXIT_OK ] && [ $exitval -ne $CTLC_EXIT ]); then
		[ $# -eq 2 ] && strarg=$2
		[ ${#exitmsgary[@]} -gt $exitval ] \
			&& exitmsg="${exitmsgary[$exitval]}"

		echo -e "$BLD$strarg$exitmsg$OFF"

		[ $exitval -ne 0 ] && echo -e \
			"Type$BLD findpkgs -h$OFF for help."
	fi

	exit $exitval
}

# run if user hits control-c
#
control_c()
{
	echo -en "
Ctrl-c detected
Cleaning up and exiting.
"
	exitme $CTLC_EXIT
}


declare -i optcount=0

declare usagestr=$(
cat <<EOF

$(basename $0) [options] pkglist topdir

Description:

  This script will crawl the RHEL7 and RHE8 latest builds and look for
  packages listed in the pkglist argument. The links to the top of the
  most recent builds are...

  RHEL7
  http://download.eng.bos.redhat.com/rel-eng/latest-RHEL-7/compose
  http://download.eng.bos.redhat.com/rel-eng/latest-Supp-7-RHEL-7/compose
  http://download.devel.redhat.com/brewroot/repos/rhel-7.0-build/latest/x86_64/pkglist

  RHEL8
  http://download-node-02.eng.bos.redhat.com/rel-eng/latest-RHEL-8/compose
  http://download.eng.bos.redhat.com/rel-eng/latest-Supp-8.0-RHEL-8/compose
  http://download.devel.redhat.com/brewroot/repos/rhel-8.0-build/latest/x86_64/pkglist

Arguments:
  pkglist - This is a file containing a list of packages to seek.
            The format of the package list is a colon-separated list as
            follows.
            package : maintainer : rhel : [rhel]
            The optional rhel as a fourth field will appear if the package
            is found in both RHEL7 and RHEL8.
            Use the getpkglist script to create this list.
  topdir  - Only useful with the -b option. It's the directory into which
            the RHEL7 and RHEL8 distro trees will be copied.

Options:
  -a  - List arches along with the directories
  -b  - Builds the RHEL7 and RHEL8 distro directory trees.
  -h  - Prints this help text to the terminal.

\0
EOF
)

usage() {
	echo -en "$usagestr"
	exitme 0
}

declare b_buildtrees=false
declare b_arches=false

declare rh7link="http://download.eng.bos.redhat.com/rel-eng/latest-RHEL-7/compose"
declare su7link="http://download.eng.bos.redhat.com/rel-eng/latest-Supp-7-RHEL-7/compose"
declare br7link="http://download.devel.redhat.com/brewroot/repos/rhel-7.0-build/latest/x86_64/pkglist"

declare rh8link="http://download-node-02.eng.bos.redhat.com/rel-eng/latest-RHEL-8/compose"
declare su8link="http://download.eng.bos.redhat.com/rel-eng/latest-Supp-8.0-RHEL-8/compose"
declare br8link="http://download.devel.redhat.com/brewroot/repos/rhel-8.0-build/latest/x86_64/pkglist"

declare pkg="os/Packages"
declare topdir=

declare -a rh8stream=(
"Supplementary"
"AppStream"
"BaseOS"
"CRB"
"HighAvailability"
"NFV"
"RT"
"ResilientStorage"
)
declare -i rh8streamsiz=${#rh8stream[@]}

declare -a rh7stream=(
"Supplementary"
"Client-optional"
"Client"
"ComputeNode-optional"
"ComputeNode"
"Server-NFV"
"Server-RT"
"Server-SAP"
"Server-SAPHANA"
"Server-optional"
"Server"
"Workstation-optional"
"Workstation"
)
declare -i rh7streamsiz=${#rh7stream[@]}

declare -a rh7arch=(
"x86_64"
"ppc64"
"ppc64le"
"s390x"
)
declare -i rh7archsiz=${#rh7arch[@]}

declare -a rh8arch=(
"x86_64"
"ppc64le"
"s390x"
"aarch64"
)
declare -i rh8archsiz=${#rh8arch[@]}

declare hcmd="elinks -dump -no-references"

declare -i fstate_none=0
declare -i fstate_base=6 # 8-6 = 2, 7-6 = 1 converts fstate_rh* to bit offset
declare -i fstate_rh7=1
declare -i fstate_rh8=2
declare -i ftable	# two bit truth table for fstate
declare -a farray	# array of discovered or not found packages


# ui_strtok - tokenizes a string and returns an array
#
# $1 - the string to tokenize
# $2 - the string of delimiters
# $3 - returns the tokenized string as an array
#
# examples:
#
# ui_strtok kernel-pegas-4.11.0-2.el7.x86_64 ".-" array
#
# ${array[@]} will contain all the tokens separated by delimiters "."
# and "-", and the delimiters will be replaced by spaces.
#
ui_strtok() {
	IFS="$2" read -r -a $3 <<< "$1"
}

# get_pkgname - extract the n from nvr
#
# Tokenize the package name.
# There are packages with names like this..
#
#   java-1.6.0-openjdk-demo-1.6.0.41-1.13.13.1.el7_3.x86_64.rpm
#
# ..where splitting on the last hyphen isn't good enough to isolate the
# package name.
#
# The last token is automatically dropped, since it's the distro and arch.
# It's the second to last token that must be examined. If it begins with a
# number, it will be dropped and all preceding tokens will be recombined to
# the package name.
#
get_pkgname(){
    local p="$1"
    local pary
    local pn
    local j
    local k
    local f

    ui_strtok "$p" "-" pary

    # We will always use the first token.
    #
    pn=${pary[0]}

    # Get the index to the second to last token. If its first char is a
    # number, then drop it and set the index to the previous token.
    #
    k=$((${#pary[@]} - 2))
    f=${pary[k]}
    [[ ${f:0:1} =~ ^-?[0-9]+$ ]] && let --k

    # Now get the remaining tokens.
    #
    for ((j = 1; j <= k; ++j)); do
	    pn="$pn""-""${pary[j]}"
    done

    eval $2="$pn"
}

clean_pkglist() {
	local path=$1
	local dir=$(dirname $path)
	local name
	local lary

	echo $path
	> $dir/tmp

	while read line; do
		[[ $line == *".rpm"* ]] || continue
		ui_strtok "$line" "] " lary
		line=${lary[3]}
		get_pkgname "$line" name
		echo $name >> $dir/tmp
	done < $path

	mv -f $dir/tmp $path
}

# getpkglist - acquire a list of packages at the url
#
# Globals
#   topdir    - top directory for the RHEL7 and RHEL8 trees
#
# Arguments
#   outsubdir - the rh7 or rh8 path in the repo at the link
#   stream    - Server, Client, Workstation, etc.
#   arch      - x86_64, ppc, etc
#   link      - url for the given stream
#   dir       - directory into wich the packages go
#
getpkglist() {
	local link="$1"
	local outsubdir="$2"

	[ -d $outsubdir ] || mkdir -p $outsubdir

	$hcmd $link > $outsubdir/pkglist
	clean_pkglist "$outsubdir/pkglist"
}

clean_brpkglist() {
	local path="$1"
	local name
	local tfil=/tmp/tfil

	echo $path
	> $tfil

	while read line; do
		[[ $line == *".rpm"* ]] || continue
		line=$(basename $line)
		get_pkgname "$line" name
		echo $name >> $tfil
	done < $path

	mv -f $tfil $path
}

get_brpkglist() {
	# topdir is global
	local distro="$1"
	dir="$topdir/rh$distro/BUILDROOT"
	local link

	[ $distro -eq 7 ] && link="$br7link"
	[ $distro -eq 8 ] && link="$br8link"

	[ -d $dir ] || mkdir -p $dir

	$hcmd $link > $dir/pkglist
	clean_brpkglist "$dir/pkglist"
}

# buildtrees() - build the RHEL7 and RHEL8 trees from the distros
#
# Globals
#   pkg          - os/Packages
#   topdir       - top directory for RHEL trees
#   rh7link      - url of rh7 distro tree
#   br7link      - url of rh7 BUILDROOOT
#   su7link      - url of rh7 Supplementary
#   rh7stream    - array of streams in RHEL7
#   rh7streamsiz - number of elements in the the rh7stream array
#   rh8link      - url of rh8 distro tree
#   br8link      - url of rh8 BUILDROOT
#   su8link      - url of rh8 Supplemental
#   rh8stream    - array of streams in RHEL8
#   rh8streamsiz - number of elements in the rh8stream array
#
buildtrees() {
	# topdir is global

	local j	        # - iterating variables
	local k         # - :
	local stream    # - extracted from given stream array
	local arch      # - extracted from given arch array
	local urlsubdir # - composite subdir of the url distro tree
	local outsubdir # - composite subdir of the destination dir
	local link      # - copmosite of appropriate link and urlsubdir

	echo "RHEL7"
	echo "-----"

	get_brpkglist 7

	# loop through streams
	#
	for ((j = 0; j < $rh7streamsiz; ++j)); do

		stream=${rh7stream[$j]}

		if [[ $stream == "Server" ]]          || \
		   [[ $stream == "Server-optional" ]]; then

			# loop through arches
			#
			for ((k = 0; k < $rh7archsiz; ++k)); do
				arch=${rh7arch[$k]}
				link=$rh7link/$stream/$arch/$pkg
				outsubdir=$topdir/rh7/$stream/$arch
				getpkglist $link $outsubdir
			done

		elif [[ $stream == "Supplementary" ]]; then

			# loop through arches
			#
			for ((k = 0; k < $rh7archsiz; ++k)); do
				arch=${rh7arch[$k]}
				link=$su7link/Server/$arch/$pkg
				outsubdir=$topdir/rh7/$stream/$arch
				getpkglist $link $outsubdir
			done
		else
			# Other streams only support arch x86_64
			#
			link=$rh7link/$stream/x86_64/$pkg
			outsubdir=$topdir/rh7/$stream/x86_64
			getpkglist $link $outsubdir
		fi
	done

	echo

	echo "RHEL8"
	echo "-----"

	get_brpkglist 8

	# Loop through streams
	#
	for ((j = 0; j < $rh8streamsiz; ++j)); do

		stream=${rh8stream[$j]}

		if [[ $stream == "AppStream" ]] || \
		   [[ $stream == "BaseOS" ]]    || \
		   [[ $stream == "CRB" ]]; then

			# Loop through arches
			#
			for ((k = 0; k < $rh8archsiz; ++k)); do
				arch=${rh8arch[k]}
				link=$rh8link/$stream/$arch/$pkg
				outsubdir=$topdir/rh8/$stream/$arch
				getpkglist $link $outsubdir
			done

		elif [[ $stream == "HighAvailability" ]] ||
		     [[ $stream == "ResilientStorage" ]]; then

			# Loop through arches
			#
			for ((k = 0; k < ($rh8archsiz - 1); ++k)); do
				arch=${rh8arch[k]}
				link=$rh8link/$stream/$arch/$pkg
				outsubdir=$topdir/rh8/$stream/$arch
				getpkglist $link $outsubdir
			done

		elif [[ $stream == "Supplementary" ]]; then

			# Loop through arches
			#
			for ((k = 0; k < $rh8archsiz; ++k)); do
				arch=${rh8arch[k]}
				link=$su8link/$stream/$arch/$pkg
				outsubdir=$topdir/rh8/$stream/$arch
				getpkglist $link $outsubdir
			done
		else
			getpkglist 8 $stream "x86_64" $rh8link
		fi
	done
}

# process_stream()
#
# Globals
#   b_arches - whether to process for each arch
#   topdir   - where the rh7 and rh8 distro trees are located
#   farray   - array of discovered or not found packages
#
# Arguments
#   $1 - stream - the stream of paths to pkg passed as an array
#   $2 - distro - 7 or 8 for rhel7 or rhel8
#
process_stream() {
	# echo "process_stream"
	local st=$1[@]  # stream is passed as an array of strings
	local distro=$2	# 7 or 8 for rhel7 or rhel8
	td=${topdir%/}	# topdir stripped of any trailing slash
	local line	# a line read from the stream array
	local lary	# the tokenized line read from the stream
	local dary	# the tokenized directory of the distro
	local darysize	# the number of tokens in the tokenized directory
	local lindex	# index to the first token in the line after the directory
	local prev=	# used to prevent multiple output when b_arches is not set
	local tstr	# temp string
	local j		# loop index

	ui_strtok "$td" "/" dary
	darysize=${#dary[@]}
	lindex=$((darysize+1))	# index to 1st token past the dir

	# convert the stream to an array
	#
	stream=("${!st}")
	# echo ${stream[@]}

	for ((j = 0; j < ${#stream[@]}; ++j)); do
		line=${stream[j]}
		line=$(echo $line | sed 's|//|/|')	# subs // with /
		ui_strtok "$line" "/:" lary
		# echo "#stream: ${#stream[@]} j: $j lary: ${lary[@]}"
		if $b_arches; then
			tstr=$(printf "    RHEL-$distro %-21s%s\n" \
				${lary[lindex]} ${sary[$((lindex+1))]})
			farray+=("$tstr")
		else
			if [[ $prev != ${lary[lindex]} ]]; then
				tstr=$(printf "    RHEL-$distro %s\n" ${lary[lindex]})
				farray+=("$tstr")
			fi
			prev="${lary[lindex]}"
		fi
	done
}

# get_stream - grep the files in the directory for the pkg
#
# Creates an array of strings (stream) to be parsed by process_stream().
#
# Globals:
#   topdir	- where the rh7 and rh8 distro trees are located
#   farray	- array of discovered or not found packages
#   fstate	- two bit truth table
#   fstate_none	- package not present in either rh7 or rh8
#   fstate_rh7	- package found in rh7
#   fstate_rh8	- package found in rh8
#
get_stream() {
	# echo "get_stream"
	# topdir is global
	local distro=$1	# 8 or 7 for rhel8 and rhel7 respectively
	local pkg=$2	# name of the package being sought
	local mnt=$3	# name of the maintainer of the package
	local b_hyph=$4 # name of package + hypen to seek ancillary pkgs
	local stream	# will get array of strings resulting from grep of pkg
	local pary	# tokenized package string as an array
	local parysize	# size of the token array
	local ltindex	# index to last token
	local stat	# status of grep call
	local tstr	# temp string

	# Bugzilla doesn't give us pakcage : maintainer for things like
	# 'package-devel, so We must look for them separately.
	#
	if $b_hyph; then
		stream=($(grep -r -m1 "^$pkg-" $topdir/rh$distro))
		stat=$?
	else
		stream=($(grep -r -m1 "^$pkg$" $topdir/rh$distro))
		stat=$?
	fi

	if [ $stat -eq 0 ]; then

		# If the package was sucessfully grept ...
		# set the corresponding fstate bit
		#
		fstate=$((fstate |= (distro - fstate_base)))

		# tokenize the stream pathname and acquire the index to
		# the package name.
		#
		ui_strtok ${stream[0]} ":" pary
		ltindex=$(( ${#pary[@]} -1 ))

		# save the prospective output string to the farray
		#
		tstr=$(printf "%-24s%s\n" ${pary[ltindex]} $mnt)
		farray+=("$tstr")

		# process the array of paths to package
		#
		process_stream stream $distro
	else
		# if the package was not grept, save the NOT FOUND string
		# wo the farray
		#
		farray+=("    RHEL-$distro NOT FOUND")
	fi
	return $stat
}


dump_farray() {
	declare farysize=${#farray[@]}
	declare k

	for ((k = 0; k < farysize; ++k)); do
		echo ${farray[k]}
	done
	echo
}

# parse_pkglist - seek each of the packages in the pkglist
#
# Globals
#   topdir	- where the rh7 and rh8 distro trees are located
#   farray	- array of discovered or not found packages
#   fstate	- two bit truth table
#   fstate_none	- package not present in either rh7 or rh8
#   fstate_rh7	- package found in rh7
#   fstate_rh8	- package found in rh8
#
parse_pkglist() {
	local pkglist="$1"
	local stream
	local line
	local lary
	local pkg
	local mnt
	local stat

	while read line; do
		ui_strtok "$line" ":" lary
		pkg="${lary[0]}"
		mnt="${lary[1]}"
		# printf "%-24s%s\n" $pkg $mnt
		fstate=fstate_none
		farray=()
		get_stream 7 "$pkg" "$mnt" false
		get_stream 8 "$pkg" "$mnt" false
		dump_farray
		fstate=fstate_none
		farray=()
		get_stream 7 "$pkg" "$mnt" true
		get_stream 8 "$pkg" "$mnt" true
		dump_farray
	done < $pkglist
}

main() {
        # Trap for control-c
        trap control_c SIGINT

	declare pkglist
	declare args=2

	while getopts abh OPTION; do
    	    case "$OPTION" in
		h ) usage
		    exitme 0
		    ;;
		a ) b_arches=true
		    let ++optcount
		    ;;
		b ) b_buildtrees=true
		    let ++optcount
		    args=2
		    ;;
		* ) echo "unrecognized option -$OPTION"
		    echo -e "$usagestr"
		    exit 127
	    esac
	done

	shift $optcount
	[ $# -eq $args ] || exitme $EXIT_INVARG

	pkglist="$1"
	[ -f $pkglist ] || exitme $EXIT_INVFIL

	topdir="$2"
	[ -d $topdir ]  || exitme $EXIT_INVDIR

	$b_buildtrees && buildtrees $topdir

	echo
	echo "---------------------------------------"
	echo
	parse_pkglist $pkglist

	exitme $EXIT_OK
}

main $@

exitme $EXIT_OK

