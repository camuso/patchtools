#!/bin/bash
#
# hgrep 0.2
#

declare usagestr=$(
cat <<EOF

hgrep [options] string [dir/file | dir]

options - any valid grep option

string  - string or regex to grep

dir/fil - the directory or filename(s) to search, where the dir/fil
          argument can include a regex, like: ./drivers/\\*.[ch]

	  Backslash is required to escape special characters, like *.
	  If you omit the dir/fil argument, the grep will be performed
	  for every file in the current directory and any of its
	  subdirectories.

	  You can specify a directory without a file, but you cannot
	  specify a file without a directory.
EOF
)

function usage {
	echo -e "$usagestr"
	echo
	exit
}

argc=$#		# The number of arguments
pathspec="./*"	# Last space-separated token in the command line
filespec="*"	# Last '/' separated token in the command line
dirspec="./"	# '/' separated tokens excluding the filespec

declare b_quiet=false
declare -a optstr=""
declare -i index=0
declare -i n_opts=0
declare -i n_nonopts=0
declare -a grepstr
declare -i gpos
declare -a qstr=

[ "$1" == "?" ] && usage

# echo "Number of args: $argc"
for (( index = 1; index <= $argc; index++ )); do
	arg="${!index}"
	# echo -n "arg_$index: "$arg""
	if [ "${arg:0:1}" == "-" ]; then
		optstr="$optstr $arg"
		# echo " options: $optstr"
		let n_opts++
	# else
		# echo
	fi
done
# echo "Number of opts: $n_opts, Options: $optstr"

n_nonopts=$(( $argc - $n_opts))
# echo "Non-option args: $n_nonopts"

case $n_nonopts in
	1 ) 	grepstr="${!argc}"
		;;
	2 ) 	pathspec="${!argc}"
		gpos=$((argc - 1))
		grepstr="${!gpos}"
		;;
	3 )	qstr="${!argc}"
		ppos=$((argc - 1))
		gpos=$((argc - 2))
		pathspec="${!ppos}"
		grepstr="${!gpos}"
		;;
	* )	usage
		;;
esac
# echo "pathspec: $pathspec, grepstr: $grepstr"

[ "$qstr" == "q" ] && b_quiet=true

# If the entire path is a directory, then the filespec defaults
# to the "*" wildcard.
# Else, do pattern matching to extract the dirspec and filespec.
#
if [ -d "$pathspec" ]; then
	dirspec="$pathspec"
	filespec="*"
else
	dirspec="${pathspec%/*}/"
	filespec="${pathspec##*/}"
fi

# echo "dirspec: $dirspec, filespec: $filespec"

# Need to get the grep version, because earlier versions do not support
# the '-T' option.
#
# The minimum version supporting the '-T' option is 2.6.0
#
mingrepversion=260

# Get the first line of the grep version and trim out everything but the
# version number.
#
grepversion=$(grep -V | head -1 | tr -cd '[[:digit:]]')

# If the grepversion is 2.6.0 or greater, then it supports '-T'
#
if [ $grepversion -ge $mingrepversion ]; then topt='-T'; else topt=''; fi

execstr="find "$dirspec" -type f -iname "$filespec" \
	-exec grep -Hns"$topt" --color $optstr "$grepstr" '{}' \\;"
#echo $execstr

# $optstr cannot be in quotes, or grep will search for the null string
# and will assume that the $grepstr is the directory specification.
#
#find "$dirspec" -type f -iname "$filespec" \
#	-exec grep -Hns$te --color $optstr "$grepstr" '{}' \;
# set -x
find "$dirspec" -type f -iname "$filespec" \
	-exec sh -c '\
	declare CCR="\e[K"   	# clear line and carriage return
	declare UP1="\e[1A"	# move cursor up one line
	[ "$4" != "q" ] && echo $3
	grep -q -m1 "$2" $3
	if [ $? -eq 0 ]; then
		[ "$4" == "q" ] && echo $3
		grep -ns --color $1 "$2" $3
	elif [ "$4" != "q" ]; then
		echo -en "$UP1"
		echo -en "$CCR"
	fi' \
	sh "$optstr$topt" "$grepstr" '{}' $qstr \;
# set +x

