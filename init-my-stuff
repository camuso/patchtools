#!/bin/bash
#
# init-my-stuff 0.3
# set -x

[ -d ~/ark ] || mkdir ~/ark
cd ~/ark

remotename="$1"
owneropt=""
logfile="$HOME/.initmystuff.log"


#[ "$remotename" ] && owneropt="--no-same-owner"

# Unpack the archives and save them in the ~/ark directory
#
touch "$logfile"
cat /dev/null > "$logfile"
echo >> "$logfile" 2>&1

filelist="$(ls -1 ~/ark)"

echo "***************************" >> "$logfile" 2>&1
echo "* Unpacking the tar files *" >> "$logfile" 2>&1
echo "***************************" >> "$logfile" 2>&1
echo
for file in $filelist	# <-- NO QUOTES around $filelist!
do
	echo "---------------" >> "$logfile" 2>&1
	echo "Unpacking $file" | tee -a "$logfile" 2>&1
	tar -C $HOME --no-same-owner --keep-newer-files -xvf $file \
		>> "$logfile" 2>&1
	echo "* * * * * * * * * " >> "$logfile" 2>&1
	echo "" >> "$logfile" 2>&1
done
echo "***************************" >> "$logfile" 2>&1
echo >> "$logfile" 2>&1
echo >> "$logfile" 2>&1

# Return to $HOME
#
cd

# Copy etc and rc files out of their archive directories into their respective
# real directories, but only if they're newer.
#
echo "************************************************" >> "$logfile" 2>&1
echo "* Copying newer files from Backup Dirctories   *" >> "$logfile" 2>&1
echo "* but only if they're newer than existing ones *" >> "$logfile" 2>&1
echo "************************************************" >> "$logfile" 2>&1
echo >> "$logfile" 2>&1

for file in \
".bashrc" \
".vimrc" \
".muttrc" \
".gitconfig"
do
	echo "--------------" >> "$logfile" 2>&1
	echo "Checking $file" >> "$logfile" 2>&1

	# If the file already exists in a new install, make a copy of it
	# as file.orig. This copy will not be made once the .orig file is
	# is created,
	#
	[ -f "$file" ] && [ -f "$file".orig ] || cp -vf $file $file.orig >> "$logfile" 2>&1
	[ ~/rcbak/"$file" -nt "$file" ] && cp -vf rcbak/$file . >> "$logfile" 2>&1
	echo "* * * * * * * * * " >> "$logfile" 2>&1
	echo "" >> "$logfile" 2>&1
done

# [ -f .bashrc.orig ] || cp -vf .bashrc .bashrc.orig >> "$logfile" 2>&1
# [ .bashrc.orig -nt rcbak/.bashrc ] && cp -vf rcbak/.bashrc . >> "$logfile" 2>&1
# [ rcbak/.vimrc -nt .vimrc ] && cp -vf rcbak/.vimrc . >> "$logfile" 2>&1
# [ bin/.gitconfig -nt .gitconfig ] && cp -vf hints/git/.gitconfig . >> "$logfile" 2>&1

# name=$(pwd | rev | cut -d'/' -f1 | rev)
# motherdir=$(pwd | cut -d'/' -f2)

if [ "$remotename" == "root" ]; then
	for file in \
	"hosts" \
	"krb5.conf"
	do
		echo "--------------" >> "$logfile" 2>&1
		echo "Checking $file" >> "$logfile" 2>&1
		[ -f /etc/"$file".orig ] || cp -vf /etc/$file /etc/$file.orig >> "$logfile" 2>&1
		[ ~/etcbk/"$file" -nt /etc/"$file" ] && cp -vf ~/etcbk/$file /etc/$file >> "$logfile" 2>&1
		echo "* * * * * * * * * " >> "$logfile" 2>&1
		echo "" >> "$logfile" 2>&1
	done
fi
echo "************************************************" >> "$logfile" 2>&1
echo >> "$logfile" 2>&1

# If we have a "user" it's because were running remotely, so
# do the remote cleanup.
#
if [ "$remotename" ]; then
	echo "*********************" >> "$logfile" 2>&1
	echo "* Doing Rmote Fixup *" >> "$logfile" 2>&1
	echo "*********************" >> "$logfile" 2>&1
	echo "" >> "$logfile" 2>&1
	bin/fixup-rsync $remotename >> "$logfile" 2>&1
fi
cd -

[ "$2" == "install" ] && [ "$remotename" == "root" ] && \
yum install -y --skip-broken gcc gcc-c++ ncurses-devel rpm-build git git-email cscope ipmitool OpenIPMI watchdog
# set +x
exit 0
