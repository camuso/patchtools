#!/bin/bash
#
# init-my-stuff 1.0
# set -x

[ -d ~/ark ] || mkdir ~/ark
cd ~/ark

declare remotename="$1"
declare owneropt=""
declare logfile="$HOME/.initmystuff.log"
declare filelist=""

#[ "$remotename" ] && owneropt="--no-same-owner"

touch "$logfile"
cat /dev/null > "$logfile"
echo >> "$logfile" 2>&1

echo "***************************" >> "$logfile" 2>&1
echo "* Clone the scripts       *" >> "$logfile" 2>&1
echo "***************************" >> "$logfile" 2>&1
echo
[[ -d "scripts" ]] && rm -rf scripts
[[ -d "bin" ]] && rm -rf bin
git clone https://github.com/camuso/scripts.git
mv -fv scripts bin 2>&1 | tee -a $logfile

# Unpack the archives and save them in the ~/ark directory
#
filelist="$(ls -1 ~/ark)"

echo "***************************" >> "$logfile" 2>&1
echo "* Unpacking the tar files *" >> "$logfile" 2>&1
echo "***************************" >> "$logfile" 2>&1
echo
for file in $filelist	# <-- NO QUOTES around $filelist!
do
	echo "---------------" >> "$logfile" 2>&1
	echo "Unpacking $file" | tee -a "$logfile" 2>&1
	tar -C $HOME --no-same-owner --keep-newer-files -xvf $file \
		>> "$logfile" 2>&1
	echo "* * * * * * * * * " >> "$logfile" 2>&1
	echo "" >> "$logfile" 2>&1
done
echo "***************************" >> "$logfile" 2>&1
echo >> "$logfile" 2>&1
echo >> "$logfile" 2>&1

# Return to $HOME
#
cd

# Copy etc and rc files out of their archive directories into their respective
# real directories, but only if they're newer.
#
echo "************************************************" >> "$logfile" 2>&1
echo "* Copying newer files from Backup Dirctories   *" >> "$logfile" 2>&1
echo "* but only if they're newer than existing ones *" >> "$logfile" 2>&1
echo "************************************************" >> "$logfile" 2>&1
echo >> "$logfile" 2>&1

# Get the full pathname so we can use that to copy from.
# If the file or directory already exists, then copy it into a .orig before
# performing the rsync and possibley overwriting it with new content.
#
for f in $(ls -rtd1 rcbak/{*,.*}); do
	name=$(basename $f);
	if [ -f $f ] && [ -f "$name" ]; then
		cp -v $name $name.orig 2>&1 | tee -a $logfile
	fi
done

rsync -Pvat rcbak/ . 2>&1 | tee -a $logfile

if [ "$remotename" == "root" ]; then
	for file in \
	"hosts" \
	"krb5.conf"
	do
		echo "--------------" >> "$logfile" 2>&1
		echo "Checking $file" >> "$logfile" 2>&1
		[ -f /etc/"$file".orig ] || cp -vf /etc/$file /etc/$file.orig >> "$logfile" 2>&1
		[ ~/etcbk/"$file" -nt /etc/"$file" ] && cp -vf ~/etcbk/$file /etc/$file >> "$logfile" 2>&1
		echo "* * * * * * * * * " >> "$logfile" 2>&1
		echo "" >> "$logfile" 2>&1
	done
fi
echo "************************************************" >> "$logfile" 2>&1
echo >> "$logfile" 2>&1

# If we have a "user" it's because were running remotely, so
# do the remote cleanup.
#
if [ "$remotename" ]; then
	echo "*********************" >> "$logfile" 2>&1
	echo "* Doing Rmote Fixup *" >> "$logfile" 2>&1
	echo "*********************" >> "$logfile" 2>&1
	echo "" >> "$logfile" 2>&1
	bin/fixup-rsync $remotename >> "$logfile" 2>&1
fi
cd -

# If we are running as root and install has been requested, then install
# the development tools.
#

get_rcmurl()
{
	local majversion="$(lsb_release -rs | cut -f1 -d.)"

	case "$majversion" in
		"6" ) echo "http://download.devel.redhat.com/rel-eng/RCMTOOLS/rcm-tools-rhel-6-server.repo"
			return 0
 			;;
		"7" ) echo "http://download.devel.redhat.com/rel-eng/RCMTOOLS/rcm-tools-rhel-7-server.repo"
			return 0
			;;
	esac

	echo ""
	return 1
}

if [ "$2" == "install" ] && [ "$remotename" == "root" ]; then

	declare distro="$(lsb_release -is)"
	declare rhpkgurl=""
	declare rcmurl=""
	declare installagent""

	# Get the additional repos according to distro
	#
	if [[ "$distro" == "Fedora" ]]; then
		rhpkgurl="http://download.devel.redhat.com/rel-eng/dist-git/fedora/rhpkg.repo"
		rcmurl="http://download.devel.redhat.com/rel-eng/internal/rcm-tools-fedora.repo"
		installagent="dnf"

	elif [[ "$distro" == *"RedHat"* ]]; then
		rhpkgurl="http://download.eng.bos.redhat.com/rel-eng/dist-git/rhel/rhpkg.repo"
		rcmurl="$(get_rcmurl)"
		installagent="yum"
	else
		echo "Unrecognized distro: "$distro""
		exit 1
	fi

	curl -L -o /etc/yum.repos.d/rcm-tools.repo "$rcmurl"
	culr -o /etc/yum.repos.d/rhpkg.repo "$rhpkgurl"

	$installagent groupinstall -y 'X Window System' 'GNOME'

	$installagent install -y --nogpgcheck --skip-broken \
	gcc \
	gcc-c++ \
	openssl \
	openssl-devel \
	ncurses-devel \
	rpm-build \
	git \
	git-email \
	cscope \
	ipmitool \
	OpenIPMI \
	watchdog \
	kmmod \
	kmod-libs \
	kmodtool \
	krb5-workstation \
	krb5-libs \
	krb5-auth-dialog \
	trousers \
	trousers-devel \
	rhpkg \
	koji \
	brewkoji
fi

# set +x
exit 0
