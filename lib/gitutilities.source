#!/bin/bash
#
# gitutilities.src
#
# NOTE: ~/bin/ui.source must be included before this file.
#

declare gitutilities_loaded=true
declare scratchdir=/dev/shm
declare scratchfile=$scratchdir/scratch

[ "$ui_loaded" ]         || source $MYLIB/ui.source
[ "$patchutils_loaded" ] || source $MYLIB/patch-utils.source

# git_commit2patchset
# 	creates a patchset from contiguous commits starting with the most
#	recent.
#
# $1 - number of commits to format
# $2 - destination directory for the patch set.
# $3 - optional commit to start from (most recent of the set)
#
function git_commit2patchset {
	local patchcount=$1
	local destdir="$2"
	local commit="$3"

	git format-patch --no-renames -s -n$patchcount "$commit" -o "$destdir"
	return 0
}

# git_commit2patch
# 	creates one patch from a given commit in a series, using the
# 	number in the series of the commit in the patch as a part of
# 	its name.
#
# $1 - number of the commit in the series
# $2 - commit hash
# $3 - destination directory
#
function git_commit2patch {
	local index=$1
	local commit=$2
	local destdir=$3
	local pfx=$(printf "%04d" $index)

	if [ ${#commitnum} -gt 1 ]; then
		git format-patch -1 -k --no-renames --start-number $index $commit -o $destdir

		# If we could not format the patch, then create an empty
		# patch with the bad patch number in it.
		#
		[ $? -eq 0 ] || echo "invalid commit: $commit" > $destdir/"$pfx-inv.patch"
	else
		echo -n "" > $destdir/"$pfx-no.patch"
	fi
}

# git_file2patchset
# 	creates a patchset from a file containing a list of discontiguous
#	commits.
#
# The commits list must be organized so that the most recent commit is the
# last line in the file and the oldest commit is at the top of the file.
# git_comments2commitsfile() and git_mailhead2commitsfile() can be used to
# generate such a file.
#
# Generated patches will be suitable for applying with "git am" or for
# comparing to other patches.
#
# $1 - path of file containing the list of commits.
# $2 - destination directory for the patch set.
# $3 - optional - will return the number of patches formatted
#
function git_file2patchset {
	local commitsfile="$1"
	local destdir="$2"
	local patchcount=$(cat "$commitsfile" | wc -l)
	local commit=""
	local commitnum=0
	local index=1
	local pfx=""
	local banner=
	local pad=

	if [ $patchcount -eq 0 ]; then
		echo
		echo -e "\tSorry, but file "$attr_bold""$commitsfile""$attr_OFF" is empty."
		echo
		[ $# -eq 3 ] && eval $3=$patchcount
		return 1
	fi

	banner="Formatting $patchcount patches from upstream into $outdir"
	pad=$(ui_putnchar '=' ${#banner})
	echo -e "$BLD$banner\n$pad$OFF"

	while read line; do
		[ "${line:0:1}" == "#" ] && continue
		commit=$(echo $line | cut -d' ' -f1 | tr -dc "[[:xdigit:]]")
		commitnum=$(echo $commit | tr -s 0)
		pfx=$(printf "%04d" $index)
		if [ ${#commitnum} -gt 1 ]; then
			git format-patch -1 -k --start-number $index $commit -o $destdir
			#
			# If we could not format the patch, then create an empty
			# patch with the bad patch number in it.
			#
			[ $? -eq 0 ] || echo "invalid commit: $commit" > $destdir/"$pfx-inv.patch"
		else
			echo -n "" > $destdir/"$pfx-no.patch"
		fi
		let index++
	done < $commitsfile

	[ $# -eq 3 ] && eval $3=$patchcount
	return 0
}

# git_setsubjectprefix - set the subject prefix in .git/config
#
git_setsubjectprefix() {
	local newpfx="$(git config format.subjectprefix)"

	echo -e \
"Just press $BLD\0ENTER$OFF to leave the current subject prefix unchanged."
	getuser "New subject prefix: " newpfx
	[ "$newpfx" ] || return
	git config format.subjectprefix "$newpfx"
}

# git_getsubjectprefix - determine the subject prefix stored in .git/config
#
# $1 - query, ask user if he wants to change the prefix
#
function git_getsubjectprefix {
	local newpfx="$(git config format.subjectprefix)"
	local b_ans=true
	local b_query=false
	[ "$1" == "query" ] && b_query=true
	while true; do
		echo -e "Current subject prefix: "$attr_bold""$newpfx""$attr_OFF""
		$b_query && getyn "Change subject prefix?" b_ans
		if $b_ans; then
			getuser "New prefix: " newpfx
			git config format.subjectprefix "$newpfx"
			$b_query || break
		else
			break
		fi
	done
}

# git_repo2commitsfile
# 	create a file containing a list of commits from consecutive commits
#	in a git repo.
#
# Unless the user supplies an option, only the short form hashes will be
# written to the file.
#
# $1 - path to destination file
# $2 - Number of commits to format, before and including the most recent.
# $3 - Most recent commit in the set. Default is top of the tree, if empty.
# $4 - optional argument - "long" for long hash, short is the default.
#
# returns - 128 if $2 is an invalid commit.
#         -   1 if $3 is an invalid option
#         -   0 if all is well.
#
function git_repo2commitsfile {
	local file=$1
	local count=$2
	local lastcommit=$3
	local hashfmt_option=$4
	local hashfmt="short"

	if [ "$hashfmt_option" ]; then
		[ "$hashfmt_option" == "long" ] && hashfmt="long"
	fi

	[ "$hashfmt" == "short" ] && git log --reverse -n$2 --oneline $3 > $file
	[ "$hashfmt" == "long" ] && git log --reverse -n$2 --pretty=oneline $3 > $file

	return $?
}

# git_excisecommit - excise the commit hash from the line
#
# If there appears to be more than one hash on the line, just take the
# first one.
#
# $1 - the line to be grep'd
# $2 - the size of the hash (40 or 7,40)
#
function git_excisecommit {
	local line="$1"
	local hashsize="$2"

	echo "$line" | egrep -o "\b[0-9a-f]{"$hashsize"}\b" | head -1
}

# extract_subject - get the subject from the subject line of the patch
#
# The subject line is expected to have the following format.
#
# Subject: [yada-yada] some explicatory text
#
# Even without the square brackets in the subject line, this function will
# return the correct subject string.
#
# $1 - file containing the subject line
#
extract_subject() {
	local file="$1"
	local subject=$(grep -n -m1 'Subject: ' $file)
	local subline=$(echo "$subject" | cut -d':' -f1)
	local subext=
	local pos

	# Remove the line number from the grep of the subject
	subject=$(echo "$subject" | cut -d':' -f2-)

	# Get the line after the subject line, in case it was too long
	# for the mail client to fit on the same line. If the line does
	# not begin with a white space character, then it is not a part
	# of the subject line, so zero it.
	#
	subext=$(ui_readline $((subline + 1)) $file)
	[[ "${subext:0:1}" =~ [[:space:]] ]] || subext=

	echo "$subject""$subext"
}

# validate_commit - check the hash for a repo and congruent subject
#
# GLOBALS
# 	valfuzz - commit validation fuzz level
#
# $1 - commit hash from the submitted patch
# $2 - subject line from the submitted patch
# $3 - optional commit validation fuzz level
#
# RETURNS
# 	0 - if match is determined
# 	1 - if not sufficiently matched
#
validate_commit() {
	local commit="$1"
	local rhsubj="$2"
	local valfuzz=1   # default fuzz level is case-insensitive
	local ussubj=
	local ussubary=()
	local rhsubary=()
	local delimiters=" "
	local stat
	local index
	local ustoks
	local rhtoks
	local rhindex
	local b_nocase=false

	# If the caller passes a fuzz level, use that.
	(( $3 )) && valfuzz=$3

	# check the fuzz level
	# 0 - upstream and RHEL git log summaries must be identical
	# 1 - case insensitive
	# 2 - ignore commas
	# 3 - ignore all punctuation chars
	#
	case $valfuzz in
		0 ) delimiters=" "
		    ;;
		1 ) b_nocase=true
		    ;;
		2 ) delimiters=" ,"
		    ;;
		3 ) delimiters=" ""$punctset"
		    ;;
	esac

	# Get the upstream commit subj line or return the error.
	# Send error output to /dev/null
	ussubj=$(git log --oneline -n1 $commit 2> /dev/null)
	stat=$?
	[ $stat -eq 0 ] || return $stat

	# strip the leading commit hash off the 'git log --oneline'
	ussubj=$(echo $ussubj | cut -d' ' -f2-)

	# Tokenize the subject strings.
	ui_strtok "$ussubj" "$delimiters" ussubary
	ui_strtok "$rhsubj" "$delimiters" rhsubary
	ustoks=${#ussubary[@]}
	rhtoks=${#rhsubary[@]}

	# Case insensitive match, because people are not especially careful
	$b_nocase && shopt -s nocasematch

	# Find the first instance in the rhsubary of the first token in the
	# ussubary. If we can't find any, return 1.
	# Start with the second token (index = 1), because the first one is
	# subject to change by the RHEL submitter.
	#
	for ((index = 1; index < $rhtoks; ++index)); do
		[ "${rhsubary[$index]}" == "${ussubary[1]}" ] && break
	done

	# If we loop through the whole rhsubary without finding a match,
	# return 1.
	#
	[ $index -gt $rhtoks ] && return 1
	rhtoks=$((rhtoks - index))
	rhindex=$((index - 1))

	# Now see if the arrays are the same from here out.
	for ((index = 1; index < $rhtoks; ++index)); do
		[[ "${rhsubary[$rhindex + $index]}" == "${ussubary[$index]}" ]] || break
	done

	# Restore case sensitivity.
	$b_nocase && shopt -u nocasematch

	[ $index -eq $rhtoks ] && return 0 || return 1
}

# git_comment2commitsfile
#	Create a file containing a list of commits from taken from the "commit"
#	line in each patch in a directory. The patches in the directory are
#	backported patches with upstream commits identified in the backported
#	patch commit log.
#
# NOTE: The only files that will be parsed are those that have ".patch" at the
#	end of their names.
#
# $1 - directory containing the backported patches
# $2 - filename, including path, of the commits file.
# $3 - number of chararcters in the hashes
# $4 - patch validation fuzz level (optional)
#
function git_comment2commitsfile {
	local srcdir="$1"
	local commitsfile="$2"
	local hashsize=$3
	local valfuzz=$4
	local srcfile=""
	local line=""
	local index=1
	local jdex
	local patchlist=$(ls $srcdir/*.patch | sort -V)
	local cmtindex=1
	local linenumber=0
	local commitarray
	local sorted
	local _40digit=true
	local valpatchlist
	local filecount
	local subject
	local commit
	local stat
	local banner=

	> $commitsfile
	> $scratchfile

	patchtotal=$(wc -w <<< "$patchlist")
	create_patchlist "$patchlist" valpatchlist
	filecount=$( wc -w <<< "$valpatchlist")

	banner="$patchtotal Patches in $indir"
	pad=$(ui_putnchar '=' ${#banner})
	echo -e "$BLD$banner\n$pad$OFF"

	for srcfile in $valpatchlist; do

		echo $srcfile
		subject=$(extract_subject $srcfile)

		linenumber=0
		commitarray=()
		sorted=()

		# The default number of digits for a commit hash is 40.
		#
		# Gather anything that looks like a commit into the scratchfile
		#
		egrep '(commit|cherry)' $srcfile \
			| egrep "\b[0-9a-f]{$hashsize}\b" > $scratchfile

		# Validate any commits we found
		#
		cmtindex=0
		while read line; do
			commit=$(git_excisecommit "$line" "$hashsize")
			validate_commit $commit "$subject" $valfuzz
			stat=$?
			[ $stat -eq 0 ] || continue

			commitarray[$cmtindex]=$commit
			let cmtindex++
		done < $scratchfile

		# Sort the commit array using the -u unique switch to wring
		# out duplicates.
		#
		IFS=$'\n' sorted=($(sort -u <<< "${commitarray[*]}"))
		unset IFS

		# If we still have more than one valid commit at this point,
		# present them to the user to determine which to use.
		#
		if [ ${#sorted[@]} -gt 1 ]; then

			echo -en "There is more than one commit mentioned in patch"
			echo -e  "$BLD $index $OFF"
			echo -e  "Please choose one of the following."

			for ((cmtindex=0; cmtindex < ${#sorted[@]}; cmtindex++))
			do
				cmtstr=$(git log --oneline -n1 ${sorted[$cmtindex]})
				printf "%d - $cmtstr\n" $((cmtindex +1))
			done

			loop_range 1 $cmtindex linenumber
		else
			linenumber=1
		fi

		cmtindex=$((linenumber - 1))
		commit=${sorted[$cmtindex]}
		rm -f $scratchfile

		if [ "$commit" ]; then
			echo "$commit $index/$filecount" >> $commitsfile
		else
			# If we didn't get a commit in this srcfile, then
			# indicate that in the commitsfile by printing 40
			# zeroes where the commit number should be.
			#
			printf "%040d $index/$filecount\n" 0 >> $commitsfile
		fi
		let index++
	done
}

# git_mailhead2commitsfile
#	Create a file containing a list of commits from taken from the "From"
#	line in each git-formatted patch in a directory. The patches were
#	extracted from a mail client, like mutt.
#
# NOTE: The only files that will be parsed are those that have ".patch" at the
#	end of their names.
#
# $1 - directory where the git-formatted patches were extracted
# $2 - filename, including path, of the commits file.
#
function git_mailhead2commitsfile {
	local srcdir="$1"
	local commitsfile="$2"

	cat /dev/null > $commitsfile
	grep "From " $srcdir/*.patch | cut -d' ' -f2 >> $commitsfile
}

function git_invrepomsg {
	echo -e ""$attr_bold""$PWD""$attr_OFF" is not a valid git repo\n"
}

# git_checkrepo
# 	Determines whether the current directory is a valid git repo
#
# returns 0 valid repo, else returns 1
#
# usage:
# 	$(git_checkrepo) || echo "$PWD is not a valid git repo" || exit 1
#
function git_checkrepo {
	[ -d .git ] && return 0 || return 1
}

# git_get_lasttag <tagstr> [path]
#
# Obtains the most recent tag in the current branch and stores it in
# /dev/shm/lasttag, or the optional path submitted in $2 by the caller.
#
# Returns the tag in $1.
#
# Deletes the previously recorded last tagin /dev/shm/lasttag or the
# optional path submitted by caller.
#
# This operation can take some time, so the git command is spawned
# and we perform a wait for the tag file to appear.
#
# $1 - receives the last tag string
# $2 - optional path to store lasttag file
#
git_get_lasttag() {

	local _ltfile_
	local _lasttag_
	local _mypid_

	[ $# -eq 2 ] && _ltfile_="$2" || _ltfile_="/dev/shm/lasttag"

	[ -f "$_ltfile_" ] && rm -f $_ltfile_

	echo -n "Getting most recent git tag.."
	git describe --tags --abbrev=0 > $_ltfile_ &
	_mypid_=$!
	ui_waitonproc $_mypid_ .1
	_lasttag_=$(cat $_ltfile_)
	echo
	eval $1="$_lasttag_"
}

# git_getcurrentbranch
#
# echoes the current branch in the git tree after checking that it's a
# valid repo
#
# usage:
# 	local current_branch=$(git_getcurrentbranch)
#
function git_getcurrentbranch {
 	git_checkrepo true
	[ $? -eq 0 ] || exit 1
	echo $(git branch | egrep \* | cut -d' ' -f2)
}

# git_setbranch outdir
#
# $1 if it exists sets the outpath. Default is /dev/shm/branchlist
#
function git_setbranch {
	local index=1
	local line
	local status=0
	local gitbranch
	local linenumber
	local outpath="/dev/shm/branchlist"

	[ $# -eq 1 ] && outpath="$1"

	git branch > $outpath
	echo
	echo -e "$BLD$UND\0Change Current Branch$OFF\n"

	while read line; do
		printf "$BLD%2d$OFF  $line\n" $index
		let index++
	done < $outpath

	echo
	loop_range_q 1 $((index - 1)) linenumber
	status=$?
	[ $status -ne 0 ] && return

	gitbranch="$(ui_readline $linenumber $outpath | tr -d [\*" "])"
	echo "git checkout "$gitbranch""
	git am --abort 2>/dev/null
	git checkout "$gitbranch" # 2>/dev/null
	status=$?
	git log --oneline -n1
	return $status
}

# find_fixes - grep for all the commits since the one passed as $1
#
# $1 - a line expected to contain only a valid commit.
#
find_fixes () {
	local commit_id="$1"
	local tmpfil="$2"
	local commit_info=
	local short_hash=
	local commit_date=

	# get the author date, which is what is displayed in git-log output
	commit_info=$(git log --pretty="%h|%ad" -1 "$commit_id")
	short_hash=$(echo "$commit_info" | awk -F "|"  ' { print $1 } ')
	commit_date=$(echo "$commit_info" | awk -F "|"  ' { print $2 } ')

	> $tmpfil

	# use the date to do a git log --since=$commit_date and grep for Fixes?
	# then look for short hash
	git --no-pager log \
		--oneline \
		--pretty='%h ("%s")' \
		--since="$commit_date" \
		--grep="$short_hash" > $tmpfil

}

# check_fixes - look for missed commits
#
# Walk through the file of upstream commits looking for any that may have
# been missed. If the upstream commits have already been applied, then the
# backported commits will be reported as false positives, so precaution is
# taken to see if the "missing" commits are in the current branch.
#
# $1 - path to the file containing the commits. The commit is expected to
#      be the first field in each line of the file.
#
check_fixes() {
	local commitsfile="$1"
	local head=$(git log --oneline -n1 | cut -d' ' -f 1)
	local line=
	local fixes=
	local commitid=
	local commit_fix=
	local commit_fix_id=
	local msg="$BLD$YEL\0WARNING: found missing commit$OFF"
	local mypid
	local fixfile="/dev/shm/fixfile"

	echo -e "\nLooking for missing commits ..."

	while read line; do
		commitid=$(echo "$line" | cut -d' ' -f1)

		# If the commitid is empty, get the next line in commitsfile.
		(( 16#$commitid )) || continue

		find_fixes "$commitid" $fixfile & mypid=$!
		ui_waitonproc_tty $mypid .05 "Checking $commitid"

		if [ -s "$fixfile" ]; then

			cat "$fixfile" | while read -r commit_fix; do
				commit_fix_id=$(echo "$commit_fix" | awk ' { print $1 } ')

				# If the "missing" commit is in the current branch,
				# then the upstream commitid has already been applied.
				# In that case, get the next upstream commitid.
				git log --oneline -n1 $commit_fix_id > /dev/null 2>&1 \
					&& continue

				# If the missing commit is not in the list of upstream
				# commits, then it truly is missing from the patch set.
				if ! grep "$commit_fix_id" "$commitsfile" >& /dev/null; then
					# WARN ONLY. There may be a reason a commit is
					# is skipped.
					echo -e "$msg $commit_fix"
				fi
			done
		fi
	done < "$commitsfile"

	[ -f $fixfile ] && rm -f $fixfile
}
