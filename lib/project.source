#!/bin/bash
#
# project.source
#
# Routines for managing project environment.
#
# Call prj_init_prjfile, then call prj_set_directory for each project
# directory.

project_loaded=true

[ "$MYLIB" ] || declare MYLIB=$(cd $(dirname ${BASH_SOURCE[0]}); pwd)

[ "$ui_loaded" ] || source $MYLIB/ui.source

# Project directories and data are stored in prjfile
#
declare prjfile=""
declare prj_emptyline=""
declare -i prj_prjfile_size=	# Number of lines in the file.
declare -i prj_newcreated=1
declare -i prj_inconsistant=2

function prj_get_emptyline {
	echo "$prj_emptyline"
}

prj_check_for_blanks() {
	while read line; do [ "$line" ] || return 1; done < $1
	return 0
}

# prj_addlines - add blank lines to a file
#
# $1 - file to have lines added
# $2 - number of lines to add
#
function prj_addblanklines {
	local i
	for ((i = 0; i < $2; i++)); do
		echo $prj_emptyline >> $1
	done
}

# prj_init_prjfile_bools - uses bool offset to determine consistency
#
# This routine requires the file to be structured as follows.
#
# variable_1
# variable_2
#   :
# variable_n
# boolean_1
# boolean_2
#   :
# boolean_n
#
# $1 - path and name of prjfile
# $2 - number of lines (size of) prjfile
# $3 - index to first boolean in the file
# $4 - optional switch to disable blank line checking
#
# If the prjfile file does not exist, then create it and initialize it by
# pumping as many empty lines in it as there will be entries in the
# finished file.
#
# If the file exists, and the index to the first boolean has changed,
# then void the file and fill it with empty lines.
#
function prj_init_prjfile_bools {
	prjfile=$1	# this one's global
	local prjfile_size=$2
	local prj_boolindex=$3
	local disable_blank_check=false
	local prjstr_prjfile_created=$(
cat <<EOF
	Project file $BLD$prjfile$OFF is being created.
	with $BLD$prj_prjfile_size$OFF entries.
	The last entry is for use by the project data automaton.
EOF
)
	# Set the global prj_prjfile_size to one greater than the size
	# passed by the caller.
	# The last line contains the offset to the first boolean as part of
	# a consistency check.
	# The extra line is owned and maintained by the project.source file
	# and the user should not touch it.
	#
	prj_prjfile_size=$((prjfile_size + 1))

	# If the user passed in a fourth argument, whatever it is, disable
	# the blank checking part of the consistency check.
	#
	[ $# -eq 4 ] && disable_blank_check=true

	# If the prjfile does not exist, then create it and initialize
	# the contents.
	# Else, check to see if it has the same number of lines as the
	# caller passed. If not, initialize the contents.
	#
	if [ ! -f "$prjfile" ]; then
		echo -e "$prjstr_prjfile_created"
		prj_addblanklines $prjfile $prj_prjfile_size
		prj_set_item $prj_prjfile_size $prj_boolindex
		return $prj_newcreated
	else
		local sizediff
		local size=$(cat $prjfile | wc -l)
		local boolindex=
		sizediff=$(( size - prj_prjfile_size ))

		if [ $sizediff -ne 0 ] || [ $size -eq 0 ]; then
			> $prjfile
			prj_addblanklines $prjfile $prj_prjfile_size
			prj_set_item $prj_prjfile_size $prj_boolindex
			return $prj_inconsistant
		fi

		boolindex=$(ui_readline $size $prjfile)

		if [ $? -ne 0 ] || [ "$boolindex" != "$prj_boolindex" ]; then
			> $prjfile
			prj_addblanklines $prjfile $prj_prjfile_size
			prj_set_item $prj_prjfile_size $prj_boolindex
			return $prj_inconsistant
		fi
	fi

	$disable_blank_check && return 0 || return $(prj_check_for_blanks $prjfile)
}

# prj_init_prjfile
#
# $1 - path and name of prjfile
# $2 - number of lines (size of) prjfile
# $3 - optional switch to disable blank line checking
#
# If the prjfile file does not exist, then create it and initialize it by
# pumping as many empty lines in it as there will be entries in the
# finished file.
#
function prj_init_prjfile {
	prjfile=$1
	prj_prjfile_size=$2

	local disable_blank_check=false

	[ $# -eq 3 ] && disable_blank_check=true

	local prjstr_prjfile_created=\
"\tProject file "$attr_bold""$prjfile""$attr_OFF" is being created.\n\
\twith $prj_prjfile_size entries.\n"

	# If the prjfile does not exist, then create it and initialize
	# the contents.
	# Else, check to see if it has the same number of lines as the
	# caller passed. If not, initialize the contents.
	#
	if [ ! -f "$prjfile" ]; then
		# echo -e "$prjstr_prjfile_created"
		prj_addblanklines $prjfile $prj_prjfile_size
		return $prj_newcreated
	else
		local sizediff
		local size=$(cat $prjfile | wc -l)
		sizediff=$(( size - prj_prjfile_size ))

		if [ $sizediff -ne 0 ] || [ $size -eq 0 ]; then
			cat /dev/null > $prjfile
			prj_addblanklines $prjfile $prj_prjfile_size
			return $prj_inconsistant
		fi
	fi

	$disable_blank_check && return 0 || return $(prj_check_for_blanks $prjfile)
}

function prj_get_prjfile {
	echo $prjfile
}

function prj_get_prjfile_size {
	echo $prj_prjfile_size
}

# prj_get_item
#
# $1 - one-based offset in prjfile to item
#
function prj_get_item {
	[ $# -eq 1 ] || { echo "prj_get_item missing item number"; exit 1; }
	echo $(ui_readline $1 $prjfile)
}

# prj_set_item
#
# $1 - item to set
# $2 - new value of item
#
function prj_set_item {
	ui_replaceline $1 "$2" $prjfile
}

# prj_set_directory - sets the directory for project files
#
# $1 - string containing name or prompt for the directory
# $2 - offset into the prjfile where this directory's path is stored.
# $3 - returns pathname of directory that contains project files
# $4 - optional argument to disable querying if equal to "quiet"
#
# With the user supplied offset, index into the prjfile to get the
# desired directory string. If it doesn't exist, then prompt user for
# a new directory path. In either case, copy the directory string into
# the supplied dir argument. If the user wants to save the new dir, then
# write it into its offset in the prjfile.
#
function prj_set_directory {
	local name="$1"
	local offset=$2		# offset to dir info in prjfile
	local rtnval=$3
	local quietstr=""	# No queries, just do it.
	local b_yes=false
	local b_chdir=false
	local b_newdir=false
	local b_quiet=false
	local dir

	[ $# -eq 4 ] && quietstr=$4
	[ "$quietstr" == "quiet" ] && b_quiet=true

	dir=$(ui_readline $offset $prjfile)
	( [ $? -ne 0 ] || [ -z "$dir" ] ) && b_newdir=true

	if ! $b_quiet ; then
		if [ -d "$dir" ]; then
			echo -e "Current $name directory: $BLD$dir$OFF"
			getyn "Change this directory?" b_chdir
		fi

		if $b_chdir; then
			b_newdir=true
		else
			echo -e "You have chosen to re-use $BLD$dir$OFF"
			echo "Contents of the directory may be altered."
			b_newdir=false
		fi
	fi

	if $b_newdir; then
		ui_getnewdir "New $name directory: " dir
		[ "$dir" ] || return

		# echo -e "New "$prompt" directory is $BLD$dir$OFF"
		$b_quiet && b_yes=true || getyn "Remember this $name directory?" b_yes
		$b_yes && ui_replaceline $offset "$dir" "$prjfile"
		[ -d "$dir" ] ||  mkdir -p "$dir"
	fi

	eval $3=$dir
}

