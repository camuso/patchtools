=================
Patchdevelop v9.0
=================

This menu-driven script allows the user to compare a set of patches
from one branch with those of another branch. The branches can be
remote or local.

The script was designed to be used for comparing RHEL patches with the
correspoinding upstream commits from which they were derived or backported.
The comparison helps identify differences between the two, giving the
reviewer a clear picture of how close the backported RHEL patches are to
the upstream commits.

--------
Contents
--------
1. Installation
2. Preparing the Environment
3. Running the Script for the First Time
4. Menus, Options, and Operations.
   4.1 Menu Selections
   4.2 Discrete Operations
5. External App Menus
   5.1 The Interactively Compare patches with upstream commits menu
   5.2 Batch Comparison Setup Menu

---------------
1. Installation
---------------

The patchdevelp script and its dependencies can be git-cloned into any
directory, however that directory must be in your executable path.

For example:

	$ cd $HOME
	$ rhrepo='git://git.engineering.redhat.com'
	$ patchtools='users/tcamuso/patchtools/patchtools.git/.git'
	$ git clone $rhrepo/$patchtools mybin
	$ export PATH=$PATH:$HOME/mybin

After the above sequence of commands, the user can invoke patchdevelop
from the command line.

--------------------------------
2. Preparing the Git Environment
--------------------------------

The script must be run from the top of a linux git tree. If not, it will
exit with an error message.

The linux git tree should be configured with the linus tree as master
and with the user's trees as branches of the linus tree.

For example:

# Clone the linus tree.
git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git

# Add a rhel kernel tree as a branch, e.g. rhel7
git remote add rh7 git://git.app.eng.bos.redhat.com/rhel7.git
git fetch rh7
git checkout -b rh7 rh7/master

At this point, the git environment is ready to compare rhel7 patches with
their upstream counterparts.

---------------------------------------
3. Runing the script for the First Time
---------------------------------------

When invoking the script for the first time, or in a new git tree, the
script queries the user for the following items.

The first time the script is run, the user is queried for the following
items.

* The Patch directory

* The Work directory

* The user's preferred diff editor.
  vimdiff, emacs, and tkdiff are supported.


Patch directory: the directory containing the patches under development.

		 If this directory were populated by a mail client, then
		 the files must be renamed to be processed. The files
		 will be renamed according to their subject lines with
		 non-alpha-numeric characters replaced with hyphens.

		 This will occur automatically upon pressing the 'r'
		 control option, but only if there are no *.patch files
		 in the directory.

		 Alternatively, the user can invoke the 'R' control to
		 separately rename the files without having to run the
		 whole script.

Work directory: the directory into which the script will put upstream
                patches that were formatted using the upstream commit
                hashes in the commit logs of the patches in the Patch
                directory.

		This will occur automatically upon pressing the 'r'
		control otion, but only if there are no *.patch files
		in the directory.

		Alternatively, the user can invoke the 'F control to
		separately create the upstream patches without having to
		run the whole script.

The first two items in the "Environment" section reflect the current
state of the git tree.

   - most recent tag in the current git branch.
   - current head of the current git branch.

---------------------------------
4. Menus, Options, and Operations
---------------------------------
_________________________________________________________________________

Patch Develop 9.0  Check backported patches with upstream

    Environment
    -------------------
    Most recent tag         : kernel-4.18.0-228.el8
    Current head            : db0110354e30 xfrm: Fix crash when the hold queue is used.
 b  Current git branch      : 830
 d  Patch directory         : /home/tcamuso/Maildir/work/cur has 10 patch files
 w  Work directory          : ../cmp
 e  Diff Editor             : vimdiff

    Run Parameters
    -------------------
 1  Compare mode            : Batch
 2  Patch apply mode        : git am
 3  Patch apply fail mode   : Exit
 4  Patch seek mode         : OFF
 5  Start applying at patch : 1

    Control
    -------------------
 r  Run in batch mode
 i  Init to defaults
 h  help text
 q  Quit this script
 x  Toggle Extended Menu

    Discrete Operations
    -------------------
 R  Rename mail files in    : /home/tcamuso/Maildir/work/cur
 F  Format commits into     : ../cmp
 S  Seek missing commits
 A  Apply patches
 P  Compare Patches
 B  Create a new branch at  : db0110354e30 xfrm: Fix crash when the hold queue is used.
 V  View the log files

Enter one of the above:
_________________________________________________________________________
Fig 1. Main Menu

IMPORTANT NOTE:

Because v9.0 offers a number of new options and operations, the option to
minimize the menu was introduced. By pressing 'x', the user can toggle
whether the 'Discrete Operations' menu is shown. All the operations of the
'Discrete Operations' menu will still function, they just won't be shown.

-------------------------------------
4.1 Main Menu Selections (See Fig. 1)
-------------------------------------

Some menu items are sticky and retain their values between invocations of
the script. Sticky items will be indicated with a * in the help text below.

The "Evironment" section of the menu sets up the operating environment
for the patchreview script with the following selections.

b * Sets the git branch from which you will be operating. It is assumed
    that you have at least one RHEL branch and one upstream branch in
    your git directory. When selecting this option, you will be
    presented with a numbered choice as follows.
_________________________________________________________________________

Change Current Branch

 1  76-alt-z
 2  810
 3  820
 4  * 830
 5  830.kysela
 6  fee
 7  ipsec-next
 8  linus
 9  rh7

Press 'q' to return without making a selection.
Please enter a number between 1 and 9 or 'q': 4
_________________________________________________________________________
Fig 2. Branch Select menu (Press 'b' on Main Menu)

 The current branch is indicated with a *
 To select a different branch from the choices, simply type the number of
 the desired branch at the prompt.

d * RHEL directory, as described above in "Running the script".

w * Upstream directory, as described above in "Running the script".

e * This is the diff editor that will be used to perform an interactive
    diff of the files.

The "Run Parameters" section controls what happens when the 'r' (Run)
menu selection is pressed. These options can be cycled through their
states by pressing the corresponding option number.

1 * The Comparison Mode is selected by a state switch. The user cycles
    through the modes by repeatedly pressing this key.

    Batch - (default) This will invoke an automatic batch comparison
            of the patches.

	    The utility will compare the files and create a list of
	    those patch pairs that are not congruent according to the
	    settings in the utility.  The list of incongruent patch
	    pairs is then sent to the interactive comparison script for
	    human inspection.

    Batch Setup - Invokes the setup menu of the batch compare utility
            which allows the user to set operating parameters. The
	    parameters are sticky across invocations of the utility.

    Interactive Only - In this mode, the batch comparison utility is
            bypassed, and all the patch pairs are presented for human
            inspection.

    OFF - In the OFF mode, the pairs of patches are not diff'd after any
          preceding operations.

2 * The Patch apply mode is secleted by a state switch. The user cycles
    through the modes by repeatedly pressing this key.

    git am - (default) Applies the patches in the Patch directory to the
             current branch using "git am".

    git am 3-way merge - Applies the patches using "git am -3"

    patch --fuzz=3 -p1 - Applies the patches using the patch application.

    OFF - does not attempt to apply the RHEL patches.

3 * Patch apply fail mode determines what happens when a patch fails to
    apply with the chosen Apply Mode. The fail modes are selected by a
    state switch cycled by pressing this key.

    Exit - is the default. When a patch fails to apply, the script
           will exit.

    Continue without applying - tells the script to continue with the
           to the downstream/upstream patch comparison without
           attempting to apply any more patches.

    Return to main menu - tells the script to return to the top menu
           when a patch fails to apply.

4 * Seek missing commits
    This option toggles the search for commits that are apparently
    missing from the current series.
    Default at initialization is OFF.

5   Start from patch <number>
    This option only appears if there are *.patch files in the Patch
    directory and they have not been applied yet.

    This non-sticky option is useful if you've encountered a problem
    with one of the patches in a set and you want to continue applying
    after you've fixed the problem.


The "Control" section of the menu executes operations as follows.

r - Run the script on the patches according to the parameter settings as
    described above.

i - Initialize the script's parameters to their default settings.

h - Display this help file

q - Exit the script

x - This option toggles whether the "Discrete Operations" menu is
    visible.

-----------------------------------------
4.2 Discrete Operations Menu (See Fig. 1)
-----------------------------------------

R - Rename the extracted mail files in the Patch directory according
    to their subject lines. This will not alter the contents of the
    Patch directory if there are any *.patch files in it.

F - Format upstream patches into the Work directory using commit hashes
    discovered in the commit logs of the *.patch files in the Patch
    directory. This will not alter the contents of the Work directory
    if there are any *.patch files in it.
    Files downloaded from email must be renamed with the R control first.

S - Seek commits that may be missing from the serires.
    Files downloaded from email must be renamed with the R control first.

A - Apply the patch or patch series. This option only appears if there
    are patches remaining to be applied and the patch apply mode is
    not OFF.

P - Run the patch comparison to compare the submitted patches in the
    Patch directory with the formatted upstream patches in the Work
    directory according to the patch comparison mode.
    Upstream patches must be derived from the hashes in the patches
    in the Patch dirictory with F control first.

B - Create a new branch at the current git head. This can be useful
    when expecting patches that depend on the currently applied ones.
    You will be presented with an option to tag the branch.

V - View the session log files. This will present a menu of the currently
    existing log files you can view. The 'less' app is utilized for this
    function, so all the 'less' navigation controls apply.
_________________________________________________________________________

Select the log file you wish to view.

1 - ../cmp/bp-commits.log
2 - ../cmp/mm.log
3 - ../cmp/us-commits.log
4 - ../cmp/usvbp-commits.log

Press 'q' to return without making a selection.
Please enter a number between 1 and 4 or 'q':
_________________________________________________________________________
Fig 4. View Logs menu

---------------------
5. External App Menus
---------------------

There are two external (not sourced) scripts that can provide a menu to
the user. These scripts are included in the git repo for this script.

These menus compare the patches in the Patch directory with those in
the Work directory.

-----------------------------------------------------------------
5.1 The Interactively Compare patches with upstream commits menu
-----------------------------------------------------------------

This menu is presented after the the patches have been compared in batch
mode by the script. If there are no conflicting patches, you will see the
following message ...

 *********************************************
 *                                           *
 *     There are no conflicting patches      *
 *                                           *
 *********************************************

... and the menu will appear as follows.

_________________________________________________________________________

Interactively Compare patches with upstream commits
-----------------------------------------------------------------
 Compare : ~/Maildir/work/cur/RHEL8-3-net-PATCH-01-16-selftests-netfilter-missing-error-check.patch
    With : ../cmp/0001-selftests-netfilter-missing-error-check-when-setting.patch

	    Last Tag : kernel-4.18.0-228.el8
	    RHEL dir : /home/tcamuso/Maildir/work/cur
	Upstream dir : ../cmp
-----------------------------------------------------------------
	c - run batch file comparison to find conflicts with upstream
	b - back to the previous patch
	n - prompt for a number for a specific patch
	p - replace current upstream patch with a different commit
	x - spawns a secondary shell
	q - quit and return to previous execution environment
	or any other key moves forward to the next patch ... q
_________________________________________________________________________
Fig 5. Interactively Compare Patches menu when there are no conflicts

At this point, the most sensible thing is to press 'q', but you can look at
the patches if you like. Pressing any key other than the ones with specific
actions will invoke the diff editor you chose when you first invoked this
script.

If conflicts were discovered, you will be presented with the enumeration of
each patch having conflicts and the total number of conflicts.
_________________________________________________________________________

Patches conflicting with upstream commits
=========================================
20
46
55
64
91
108
109
110
111
112
113
114
115
116
Total number of conflicts with upstream:  14

Interactively Compare patches with upstream commits
-----------------------------------------------------------------
 Compare : ~/Maildir/work/cur/RHEL8-3-046-116-drm-dp-mst-Increase-ACT-retry.patch
    With : ../cmp/0046-drm-dp_mst-Increase-ACT-retry-timeout-to-3s.patch
Conflict : 1 of 14

	    Last Tag : kernel-4.18.0-228.el8
	    RHEL dir : /home/tcamuso/Maildir/work/cur
	Upstream dir : ../cmp
-----------------------------------------------------------------
	c - run batch file comparison to find conflicts with upstream
	m - only examine patches conflicting with upstream: true
	s - show contents of conflicts log
	b - back to the previous patch
	n - prompt for a number for a specific patch
	p - replace current upstream patch with a different commit
	x - spawns a secondary shell
	q - quit and return to previous execution environment
	or any other key moves forward to the next patch ... ^[[B
2 files to edit
_________________________________________________________________________
Fig. 6 Interactively Compare Patches menu when there are conflicts

The header of the menu not only contains the patch files being compared,
but also the count of the conflict against the total, as "1 of 14".

Pressing any key other than the ones mapped to specific actions will
invoke your diff editor to view the conflicting RHEL vs. upstream
patches.

Exiting the editor returns to the "Interactively Compare patches" menu,
where you will see the conflict count bumped to "2 of 14".

Only conflicting patches will be presented, unless you press 'n' to view
a specific patch outside of the conflicted ones.

c - invokes the batch comparison script to generate a list of files that
    are sufficiently different to warrant human inspection. When this
    key is pressed, the Batch Comparison menu is presented.

m - Option only appears if conflicting patches were detected by the batch
    comparison script.
    This opton is set to true by default after running a batch
    comparison. When true, only the conflicting patches will be
    diffed by the editor. When this option is true, all patches are
    considered.
    You can view non-conflicting patches by pressing 'n' to provide the
    patch number.

s - Option only appears if a list of incongruent patch pairs was
    generated by the batch comparison script.
    When the associated key is pressed, a list of numbers of the patch
    pairs that were incongruent is printed to the screen.

b - Steps back to the previously examined patch.

n - Prompts for a patch number to examine. This can be any patch pair
    in the set.

p - Prompts for a different commit hash for the most recently examined
    patch.

x - Spawns a secondary cell. Press control-d or type "exit" to return.

q - Quits and returns to the caller.

Any other key advances the patch counter to present the next RHEL/upstream
pair of patches to examine.

_________________________________________________________________________

-------------------------------
5.2 Batch Comparison Setup Menu
-------------------------------

The following menu only appears if the Compare Mode in the Main Menu is
set to "Batch compare setup".
_________________________________________________________________________

     Batch Comparison of RHEL Patches with Upstream
     ----------------------------------------------

     Batch Comparison of RHEL Patches with Upstream

     Environment
     ----------------------
     Most Recent Tag            : kernel-3.10.0-516.el7
  R  RHEL directory             : /home/tcamuso/Maildir/work/cur has 9 patch files
  U  Upstream directory         : ../temp has 9 patch files
  o  Optional output file.      : ../temp/mm.log

     Lines to exclude
     ----------------------
  d  diff stats                 : true
  p  file paths                 : true
  s  without leading + or -     : true

     Output Parameters
     ----------------------
  v  verbose                    : false
  V  Very verbose               : false

     Control
     ----------------------
  r  run the comparison
  e  if output file is not /dev/stdout, less the output file
  i  init to defaults
  h  print the help using less command
  x  spawn a shell
  q  quit and return to previous execution environment

Enter one of the above:
_________________________________________________________________________
Fig 7. Batch Comparison Setup Menu

  Each patchfile in the RHEL directory is compared with its complement in
  the Upstream directory. If a mismatched line is found, the sequence
  number of that patch pair is printed to the ofile, which is /dev/stdout
  by default.

  Verbose output options are available for examination of the files that
  are congruent and the ones that differ.

  Menu choices
  ------------

  All menu items are sticky, persisting across invocations of this script.
  You can use the verbose options to test the results.

  When you get the results you want, press q to advance to the Interactive
  comparison menu, where you can examine the patch pairs that were not
  congruent, if any.

  R - change the directory containing the RHEL patch files
  U - change the directory containing the Upstream patch files

  o - change the output file.
      The default is /dev/stdout, but the patchreview and patcmp scripts
      will call this with an output file defined that will exist in the
      Upstream patch directory as mm.log. You may change the name and
      location of this file with this option.

  d - when true, excludes diff stat lines from the comparison.
      It is possible for the patches to still be congruent even when
      the diff stats are different. For example, when the RHEL patch is
      a subset of the upstream patch
      Default: true

  p - when true, excludes path lines from the comparison
      You will want to do this if the file being patched has been renamed
      or moved to a different directory.
      Default: true

  s - when true, excludes lines that do not begin with + or -
      You will want to do this if you are only concerned about the lines
      that are actually being changed by the patch. When true, this will
      automatically exclude the diff stat lines, but WILL NOT exclude
      the path lines.
      Default: true

  v - verbose prints the sequence numbers of all files and indicates which
      are congruent and which are not
      Default: false

  V - Very verbose prints the sequence numbers of all the files, all the
      lines being compared in each file, and indicates whether the files
      are congruent or not.
      Default: false

      If Very verbose is true, then verbose will automatically be set true.
      If verbose is false, then Very verbose will automatically be set false.

  r - run the comparison
  e - run less on the output file
  i - init the controls and output file to defaults
  h - less this help text
  x - spawn a shell
  q - quit and return to previous execution environment

