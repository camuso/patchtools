#!/bin/bash
#
# Create an empty bash script with placeholders for help text and
# a usage function
#

source lib/getyn
source lib/formatargs

declare b_opts=false
declare b_args=false
declare b_answer=false
declare -a args
declare -i argcount=0
declare -i optcount=0
declare -i index
declare -i width
declare -i widest
declare spacer="  "
declare ofile

declare usagestr=$(
cat <<EOF

$(basename $0) [ options ] <bashscript>

Create an empty bash script with placeholders for help text and
a usage function

  -o options, a quote enclosed string containing a list of space separated
     option flags with optional corresponding arguments.

     Example: -o "n:number f:file d:directory x h"

     Creates options for -n number,  -f file, -d directory, -x and -h
     with no arguments.

  -a arguments, double quote enclosed string of arguments that follow 
     the options for the new script being created.
     If the number of arguments following the options is not exactly
     this number, then the newly created script will print its usage
     message and exit.

     Example: -a "arg1 arg2"
\0
EOF
)

usage() {
	echo -e "$usagestr"
	exit
}

while getopts ho:a: OPTION; do
    case "$OPTION" in

	o ) opts=$OPTARG
	    b_opts=true
	    optcount=$((optcount+2))
	    ;;
	a ) args=("$OPTARG")
	    b_args=true
	    echo "args: "$args""
	    optcount=$((optcount+2))
	    ;;
	h ) usage
	    ;;
	* ) echo "unrecognized option"
	    echo -e "$usagestr"
	    exit 127
    esac
done

shift $optcount
[ $# -eq 1 ] || usage
ofile=$1

if [ -f "$ofile" ]; then
	echo
	echo "File: $ofile already exists!"
	getyn "Do you want to overwrite?" answer
	$answer && echo "Overwriting file: $ofile" || exit 1
fi

> $ofile

echo -en '#!/bin/bash
#
# '"$ofile"'
#

' >> $ofile

if $b_opts; then
	$b_args && createoptions -o "$opts" -a "$args" $ofile \
	        || createoptions -o "$opts" $ofile
	chmod +x "$ofile"
	exit 0
fi

echo -n '
declare usagestr=$(
cat <<EOF

$(basename $0)' >> $ofile

$b_args && formatargs $ofile "${args[*]}" argcount || echo >> $ofile

echo -n '
\0
EOF
)

usage() {
	echo -e "$usagestr"
	exit $1
}

[ $# -eq  "$argcount" ] || usage 1

' >> $ofile

chmod +x "$ofile"

