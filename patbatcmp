#!/bin/bash
#
# patbatcmp
#

usagestr=$(
cat <<EOF

$(basename $0) [option] dir1 dir2

Options:
  -h  - Print this help screen
  -s  - Strict. Only looks for actual patched lines, those lines whose
        first character is either + or -

Compare the .patch files in two directories.
The directories must have the same number of .patch files

The comparison starts with the line that only has three dashes and a
newline and ends with the line that has only two dashes and a newline.

Lines beginning with @@ will be skipped, because these lines can be
different while the actually patched code is the same.

--- begin

Patch contents
@@ skipped

--  end

\0
EOF
)

declare dir1
declare dir2
declare savedifs="$IFS"
declare strict=false

# list of files in each directory
#
declare flist1
declare flist2

# count of the files in each directory
#
declare -i fcount1
declare -i fcount2

# File descriptors
#
declare fd1
declare fd2

# Arrays to for lists of files
#
declare -a fary1
declare -a fary2
declare -i index	# array index

#####################################################################
#
# press_any()
#
# Press any key to continue
#
press_any() {
	echo -en "\nPress any key to continue ... "
	read -n1
}

#####################################################################
#
# usage()
#
# Print usage string and exit with nonzero status
#
usage() {
	echo -e "$usagestr"
	exit 1
}

#####################################################################
#
# fcount_err()
#
# Notify user that directories do not contain the same number of
# .patch files
#
fcount_err() {
	echo -en "
$dir1 has $fcount1 .patch files.
$dir2 has $fcount2 .patch files.

Both directories must have the same number of .patch files.
"
	press_any
	usage
}

while getopts hs OPTION; do
    case "$OPTION" in

	h ) usage
	    ;;
	s ) strict=true
	    shift
	    ;;
	* ) echo "unrecognized option "
	    echo -e "$usagestr"
	    exit 127
    esac
done

# Be sure we have at exactly two parameters at this point
#
[ $# -eq 2 ] || usage

dir1="$1"
dir2="$2"

# get the list of files in each directory
#
flist1=$(ls -1 $dir1/*.patch)
flist2=$(ls -1 $dir2/*.patch)

# get the count of the files in each directory
#
fcount1=$(echo "$flist1" | wc -l)
fcount2=$(echo "$flist2" | wc -l)

# Be sure that both directories have the same number of patch files.
#
[ $fcount1 -eq $fcount2 ] || fcount_err

# Populate the arrays of patch filenames, fary1 and fary2
#
index=0
while IFS= read line; do
	fary1[$index]="$line"
	let index++
done <<< "$flist1"

index=0
while IFS= read line; do
	fary2[$index]="$line"
	let index++
done <<< "$flist2"


for ((index = 0; index < $fcount1; ++index)); do

	equiv=false

	echo "================================================================"
	echo "fary1[$index]: "${fary1[$index]}
	echo "fary2[$index]: "${fary2[$index]}
	echo "----------------------------------------------------------------"
	echo

	# Open file descriptors based on the filenames in each array
	#
	exec 5<"${fary1[$index]}"	# open the files for reading
	exec 6<"${fary2[$index]}"

	# find where the patch starts in both files
	#
	while read line; do [[ "${line:0:10}" == 'diff --git' ]] && break; done <&5
	while read line; do [[ "${line:0:10}" == 'diff --git' ]] && break; done <&6

	# Read lines from each file in a loop and compare them until
	#
	equiv=true

	while read line1; do
		read -u 6 line2;

		# Exclude line positions, index markers, and diff statements.
		# These can be different and yet the actual patched code is
		# congruent.
		#
		[ "${line1:0:2}" == "@@" ] && continue
		[ "${line1:0:6}" == "index " ] && continue
		[ "${line1:0:6}" == "--- a/" ] && continue
		[ "${line1:0:6}" == "+++ b/" ] && continue
		[ "${line1:0:10}" == 'diff --git' ] && continue

		# If strict is true, then user only wants to compare lines
		# that have "+" or "-" as the first character in the line.
		#
		if $strict; then
			firstch="${line1:0:1}"
			[ "$firstch" == "+" ] || [ "$firstch" == "-" ] || continue
		fi

		echo "$line1"
		echo "$line2"
		echo

		if [ "$line1" != "$line2" ]; then
			echo "patches are different"
			equiv=false
			break
		fi
	done <&5

	$equiv && echo "patches are congruent"

	# exit
done

IFS="$savedifs"
