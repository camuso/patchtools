#!/bin/bash
#
# patchdevelop - based on patchreview v3.1
version="1.0"
#
# This script assumes that you have already extracted your patches into
# the directory named as "indir" below. Only files named "*.patch" will
# be considered.
#
# To create a patch set from email ...
# In mutt, tag the thread you want to extract with esc-t. Untag the
# prologue, as it's not a patch. Then extract the thread into text
# files using ;-esc-C (uppercase C). When prompted for the directory,
# type the name of the mailbox directory or uparrow to the previous
# save.
#
# This script can also be used to compare any two patch sets.

# Calls on the following external scripts.#
#
# ~/bin/ren*pat
# ~/bin/patcmp

# Requires to run ...
#
# lib/*.source
# .data/patchdevelop.prj
# man/patchdevelop.man

# Enable extglob for more specific directory actions
#
shopt -s extglob

LIB="$HOME/bin/lib"
manual="$HOME/bin/man/patchdevelop.txt"

#######################################
# External Source Files
#######################################
source $LIB/ui.source
source $LIB/project.source
source $LIB/gitutilities.source

########################################
# Function Return Codes
########################################
declare rc_continue=0	# Continue for another pass
declare rc_run=1	# Run patchdevelop

#########################################
# Functions
#########################################

function exit_patchdevelop {
	set_booleans
	exit $1
}

function get_gitbranch {
	echo $(git branch | egrep \* | cut -d' ' -f2)
}

function set_gitbranch {
	local index=1
	git branch > $outdir/branchlist
	echo -e "$attr_bold"

	while read line; do
		printf "%2d  $line\n" $index
		let index++
	done < $outdir/branchlist

	echo -e  "$attr_bold"
	echo -e  "The following commands will be issued before a new branch is checked out."
	echo -en "$attr_OFF"
	echo -e  "\tgit am --abort      # Abort any pending git am ops"
	echo -e  "\tgit checkout"
	# echo -e  "\tgit clean           # Clean out uncommitted files and directories"
	echo -e
	echo -en "$attr_bold"
	echo -en "Enter the number corresponding to the branch you want: "
	echo -en "$attr_OFF"
	read  linenumber
	[ "$linenumber" == "q" ] && exit_patchdevelop 1
	[ "$linenumber" == "x" ] && ui_sh_spawn
	gitbranch="$(ui_readline $linenumber $outdir/branchlist | tr -d [\*" "])"
	echo "git checkout "$gitbranch""
	git am --abort --quiet
	# git checkout .
	# git clean -df
	git checkout "$gitbranch" 2>&1
	[ $? -eq 0 ] || exit 1
	~/bin/gitlog1
}

function get_mailclient {
	echo $(prj_get_item $prj_mailclient)
}

function set_mailclient {
	echo -e "$attr_bold"
	echo -e "Select your mail client from the following list."
	echo -e " 1 - ThunderBird"
	echo -e " 2 - Mutt"
	promptgetchar "Your choice: " choice

	while true; do
		case $choice in

			1 )	mailclient="ThunderBird"
				renameagent=rentbpat
				prj_set_item $prj_mailclient "$mailclient"
				break
				;;

			2)	mailclient="Mutt"
				renameagent=renmutpat
				prj_set_item $prj_mailclient "$mailclient"
				break
				;;
		esac
	done
}

function init_booleans {
	for ((index=boolindex; index <= prj_entries; index++)); do
		prj_set_item $index true
	done
}

# exec_boolean
#
# Execute a command string and pass the boolean that was
# used to determine whether the command should be executed.
# The boolean will be given the value passed by the caller.
#
# $1 - The boolean
# $2 - The boolean's new value
# $3 - The command line as a strng.
#
# Returns the status of the executed command string.
#
function exec_boolean {
	argc=$#
	argv="$@"
	local stat
	local boolean=$1
	local b_newval=$2
	local cmdstr="$(echo "$@" | cut -d' ' -f$argc-)"
	local offset=prj_${boolean}
	# echo ${!offset}
	$cmdstr
	stat=$?
	# echo "$cmdstr status: $stat"
	if [ $stat -eq 0 ]; then
		if [ $argc -eq 3 ]; then
			$b_newval && boolean=true || boolean=false
		fi
		[ $argc -ge 2 ] && prj_set_item ${!offset} $boolean
	else
		echo "$cmdstr"
		echo -e "\tDid not execute successfully"
		echo
	fi
	return $stat
}

# get_booleans
#
# Read the values of the program flow control booleans from the
# project file.
#
function get_booleans {
	index=$boolindex
	for bool in \
	b_rename_infiles \
	b_save_githead \
	b_apply_patches \
	b_fmt_upstream \
	b_patcmp \
	b_gitam_err_abort
	do
		eval $bool=$(prj_get_item $index)
		ui_digit2bool $bool
		let index++
	done
}


# set_booleans
#
# Write the current values of the program flow booleans into the
# project file.
#
function set_booleans {
	index=$boolindex
	for bool in \
	b_rename_infiles \
	b_save_githead \
	b_apply_patches \
	b_fmt_upstream \
	b_patcmp \
	b_gitam_err_abort
	do
		prj_set_item $index ${!bool}
		let index++
	done
	return 0
}

# replace_patch
#
# GLOBALS
#	outdir
#	us_commits
#
function replace_patch {
	local patnum
	local commit
	local patcnt=$(cat "$outdir/$us_commits" | wc -l)

	getuser "Patch Number to replace: " patnum
	getuser "Correct commit ID: " commit
	ui_replaceline $patnum "$commit $patnum/$patcnt" "$outdir/$us_commits"
	rm -f "$outdir"/*.patch
	git_file2patchset "$outdir/$us_commits" "$outdir"
}

function git_getbranch {
	echo $(git branch | egrep \* | cut -d' ' -f2)
}

function show_settings {
	settingstr=$(
cat <<EOF
$attr_bold
    $attr_under\0Environment        $attr_OFF$attr_bold
 b  Current git branch		: $gitbranch
 m  Mail client                 : $mailclient
 d  Patch directory		: $indir has $infilecount files
 w  Work directory		: $outdir

    $attr_under\0Run Parameters     $attr_OFF$attr_bold
 1  Rename input files		: $b_rename_infiles
 2  Apply patches (git am)	: $b_apply_patches
 3  git am abort on error  	: $b_gitam_err_abort
 4  Format upstream patches	: $b_fmt_upstream
 5  Compare patchsets		: $b_patcmp

    $attr_under\0Control            $attr_OFF$attr_bold
 r  Run patch review
 i  Init to defaults
 p  Replace an upstream commit in the series
 h  help text
 x  Exit to a shell
 q  Quit this script
$attr_OFF
EOF
)
	echo -e "$settingstr"
}

function menu_parser {

	infilecount=$(ls "$indir" | wc -l)
	show_settings
	promptgetchar ""$attr_bold"Enter one of the above: "$attr_OFF"" setting

	case $setting in

		b )	set_gitbranch
			;;
		m )	set_mailclient
			;;
		d )	prj_set_directory "Patch" $prj_indir indir quiet
			;;
		w )	prj_set_directory "Work" $prj_outdir outdir quiet
			;;
		1 )	ui_toggle b_rename_infiles
			;;
		2 )	ui_toggle b_apply_patches
			;;
		3 )	ui_toggle b_gitam_err_abort
			;;
		4 )	ui_toggle b_fmt_upstream
			;;
		5 )	ui_toggle b_patcmp
			;;
		i )	init_booleans
			get_booleans
			;;
		p )	replace_patch
			;;
		q )	exit_patchdevelop 0
			;;
		x )	set_booleans
			ui_sh_spawn
			;;
		r )	set_booleans
			return $rc_run
			;;
		h )	less $manual
			;;
	esac
	return $rc_continue
}

function menu_loop {
	get_booleans

	# get the patch and work directories.
	#
	indir=$(prj_get_item $prj_indir)
	outdir=$(prj_get_item $prj_outdir)

	# get the mail client
	#
	mailclient=$(prj_get_item $prj_mailclient)
	commit_msg_file="$outdir/commit-msg.txt"

	# delete any "scratch" file from the indir
	#
	rm -f "$indir"/scratch

	local stat=0

	while $true; do
		menu_parser
		stat=$?
		# echo "menu_parser_stat: $stat"
		[ $stat -eq $rc_run ] && break
	done
	return $stat
}

repatchstr="
Spawning a shell so you can fix or refresh the aborted patch
and apply by hand.
"

function check_gitam {
	echo -n "Patch failed to apply. "

	if $b_gitam_err_abort ; then
		echo "Aborting git am."
		git am --abort

		promptgetchar \
			"Press x to exit, any other key to continue: " \
			response
		echo
		[ "$response" == "x" ] && exit 1
		return 1
	else
		git am --abort
		echo
		echo "Fix or refresh the aborted patch and apply by hand."
		echo -e "Type "$attr_bold"exit 1"$attr_OFF" if you want to exit the script."
		ui_sh_spawn
		[ $? -ne 0 ] && exit 1
		return 0
	fi
}

# strindex string-1 string-2
#
# Return zero-based index of string-2 in string-1
# Returns -1 if string-2 is not found in string-1
#
function strindex {
	x="${1%%$2*}"
	[[ $x = $1 ]] && echo -1 || echo ${#x}
}

# create_commit_msg
#
# $1 - pathname of patch
#
# GLOBALS
#	outdir
#	commit_msg_file
#
function create_commit_msg {
	local diffstr="diff "
	local subjstr="Subject: "
	local found_subj=false

	echo "" > "$commit_msg_file"

	while read line; do
		[ "${line:0:5}" == "$diffstr" ] && break

		if [ "${line:0:9}" == "$subjstr" ]; then
			local sumstrpos=$(($(strindex "$line" "]") + 1))
			local sumstr=$(echo -e ${line:$sumstrpos})
			echo "$sumstr" >> "$commit_msg_file"
			echo "" >> "$commit_msg_file"
			found_subj=true
		fi
		$found_subj && echo "$line" >> "$commit_msg_file"
	done < "$1"
}

# retry_patch
#
# $1 - pathname of patch
#
# GLOBALS
#	outdir
#	commit_msg_file
#
function retry_patch {
	local retrystat
	local retryname=$(basename -s .patch "$1")

	create_commit_msg "$1"
	git clean -df --exclude=*.rej
	patch --fuzz=3 -p1 < "$1" 2>&1 | tee "$outdir"/"$retryname".retry
	retrystat=$?
	if [ $retrystat -ne 0 ]; then
		echo "Unable to apply "$1""
		echo "Exiting script with nonzero status"
		echo
		exit 1
	fi

	# get any .rej files out of the way by moving them to the $outdir
	#
	git status --porcelain
	for rej in $(git status --porcelain); do
		[ -d "$rej" ] && continue
		if [[ $(echo "$rej" | tail -c4) == "rej" ]]; then
			echo $rej
			mkdir -p ../temp/$(dirname $rej)
			mv $rej ../temp/$(dirname $rej)/.
			# read -n1
		fi
	done

	git status
	git add .
	git commit . -F "$commit_msg_file"
	echo
	# git log --pretty -n1
	# read -n1
}

# apply_patches
#
# GLOBALS
#	indir
#	outdir
#	bp_commits
#
function apply_patches {
	# patchcount is global
	local stat=0
	echo "" > "$outdir/$bp_commits"

	# for patch in $(ls $indir/*.patch); do
	for patch in $(ls -1 "$indir"/*.patch | sort -V); do
		let patchcount++
		echo "$patch"
		git am -3 $patch
		stat=$?
		# echo "git am stat: $stat"

#		if [ $stat -ne 0 ]; then
#			check_gitam
#			stat=$?
#			[ $stat -ne 0 ] && break
#		fi

		if [ $stat -ne 0 ]; then
			git am --abort
			$b_gitam_err_abort && exit 1
			retry_patch "$patch"
		fi

		printf "%3d " $patchcount >> "$outdir/$bp_commits"
		git log --oneline -n1 >> "$outdir/$bp_commits"
	done
	[ $stat -eq 0 ] && cat "$outdir/$bp_commits" || tail -1 "$outdir/$bp_commits"
	return $stat
}

#############################
# Start of Script Execution
#############################

b_ui_int_first_getyn=false	# For lib/ui.source

# Save our current shell level.
#
myshlvl=$SHLVL

# Print the Herald
#
echo -e ""$attr_bold""$attr_under""
echo "Patch Develop $version - Check backported patches with upstream"
echo -e "$attr_OFF"

# Determine if we're at the top of a git tree. If not, exit.
#
if ! [ -d .git ]; then
	echo -e "The current directory... "$attr_bold" "$PWD""$attr_OFF""
	echo -e "\t ...is not the top of a git tree."
	echo "Please cd to the top of a git tree."
	echo
	exit 1
fi

echo -en "$attr_bold"
echo -en "Press \"q\" to quit or \"x\" to spawn a new shell "
echo -e  "at any \"(y/n)\" prompt."
echo -en "$attr_OFF"

###########################################
# Parameter Initialization
###########################################

# Declare the global variables
#
declare prj_entries=0
declare index=0
declare boolcount=0
declare boolindex=0
declare b_found_first_bool=false
declare infilecount=0
declare gitbranch=$(get_gitbranch)
declare mailclient="Mutt"
declare renameagent=renmutpat
declare us_commits="us-commits.log"	# upstream commits log
declare bp_commits="bp-commits.log"	# backport commits log
declare patchcount=0

# This loop enumerates and counts the items in the project file.
# Add new booleans to the end of the list.
# Add new non-boolean parameters to the top of the list.
#
for offset in \
prj_mode \
prj_indir \
prj_outdir \
prj_mailclient \
prj_b_rename_infiles \
prj_b_apply_patches \
prj_b_fmt_upstream \
prj_b_patcmp \
prj_b_gitam_err_abort
do
	let index++
	let $offset=$index
	if [ "${offset:3:3}" == "_b_" ]; then
		let boolcount++
		if ! $b_found_first_bool; then
			boolindex=$index
			b_found_first_bool=true
		fi
	fi
done

prj_entries=$index
[ -d "$HOME/bin/.data" ] || mkdir $HOME/bin/.data
[ -e "$HOME/bin/.data/patchdevelop.prj" ] || touch $HOME/bin/.data/patchdevelop.prj
prj_init_prjfile ~/bin/.data/patchreview.prj $prj_entries

# If the above call to prj_init_prjfile returns nonzero, it means that a
# new project file has been created and its values must be initialized.
#
if [ $? -ne 0 ]; then
	echo
	echo "A new project file has been created."
	echo "We will need to know where your patches will be and where you"
	echo "want us to put the output of this script."
	prj_set_directory "Patch" $prj_indir indir quiet
	prj_set_directory "Work" $prj_outdir outdir quiet
	init_booleans
fi

prj_set_item $prj_mailclient $mailclient

##############################################
# Main Program Loop
##############################################

while true; do
	menu_loop
	menu_stat=$?
	# echo "menu_loop_stat: $menu_stat"

	if $b_rename_infiles; then
		exec_boolean b_rename_infiles false "$renameagent $indir"
		[ $? -ne 0 ] && continue
	fi

	if $b_apply_patches; then
		git am --abort
		patchcount=0
		exec_boolean b_apply_patches false "apply_patches"
		st=$?
	fi

	# Generate a patch set from the original upstream patches.
	#
	if $b_fmt_upstream; then
		rm -vf "$outdir"/*.patch
		echo "" > "$outdir/$us_commits"
		echo
		git_comment2commitsfile $indir "$outdir/$us_commits"
		echo
		cat "$outdir/$us_commits"
		echo
		exec_boolean b_fmt_upstream false \
			"git_file2patchset ${outdir}/"$us_commits" ${outdir}"
	fi

	if $b_patcmp; then
		patcmp $indir $outdir 'return to main menu'
		stat=$?
		[ $stat -eq 1 ] && continue
		[ $stat -eq 2 ] && exit
	fi

	if [ $menu_stat -eq $rc_run ]; then

		# Backout of any residual child shells.
		#
		ui_sh_backout $myshlvl
	fi
done

# Done with the patch review
#
exit_patchdevelop 0

