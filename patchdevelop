#!/bin/bash
#
# patchdevelop - based on patchreview v3.1

version="4.4"

# This script assumes that you have already extracted your patches into
# the directory named as "indir" below. Only files named "*.patch" will
# be considered.
#
# To create a patch set from email ...
# In mutt, tag the thread you want to extract with esc-t. Untag the
# prologue, as it's not a patch. Then extract the thread into text
# files using ;-esc-C (uppercase C). When prompted for the directory,
# type the name of the mailbox directory or uparrow to the previous
# save.
#
# This script can also be used to compare any two patch sets.

# Calls on the following external scripts.
#
# ~/bin/renpat
# ~/bin/patcmp
# ~/bin/patbatcmp
# ~/bin/patbatcmpmgr
# ~/bin/readlinen

# Requires to run ...
#
# lib/*.source
# .data/patchdevelop.prj
# man/patchdevelop.man

# Enable extglob for more specific directory actions
#
shopt -s extglob

BIN="$HOME/bin"		# must be in execution path
LIB="$BIN/lib"
manual="$HOME/bin/man/patchdevelop.txt"

#######################################
# External Source Files
#######################################
source $LIB/ui.source
source $LIB/project.source
source $LIB/gitutilities.source
source $LIB/patch-common.source

########################################
# Function Return Codes
########################################
declare rc_continue=0	# Continue for another pass
declare rc_run=1	# Run patchdevelop

#########################################
# Functions
#########################################

function exit_patchdevelop {
	set_booleans
	[ -e "$last_tag_file" ] && rm -f $last_tag_file
	exit $1
}

# run if user hits control-c
#
control_c()
{
	echo -en "\nCtrl-c detected\nCleaning up and exiting.\n"
	exit_patchdevelop $CTLC_EXIT
}

function init_booleans {
	for ((index=boolindex; index <= prj_entries; index++)); do
		prj_set_item $index true
	done
}

# get_booleans
#
# Read the values of the program flow control booleans from the
# project file.
#
# removed in v4.4
# 	b_patcmp
# 	b_patbatcmp
#
# added in v4.4
# 	b_40digit
#
function get_booleans {
	index=$boolindex
	for bool in \
	b_rename_infiles \
	b_save_githead \
	b_apply_patches \
	b_fmt_upstream \
	b_gitam_err_abort \
	b_40digit
	do
		eval $bool=$(prj_get_item $index)
		ui_digit2bool $bool
		let index++
	done
}


# set_booleans
#
# Write the current values of the program flow booleans into the
# project file.
#
# removed in v4.4
# 	b_patcmp
# 	b_patbatcmp
#
# added in v4.4
# 	b_40digit
#
function set_booleans {
	index=$boolindex
	for bool in \
	b_rename_infiles \
	b_save_githead \
	b_apply_patches \
	b_fmt_upstream \
	b_gitam_err_abort \
	b_40digit
	do
		prj_set_item $index ${!bool}
		let index++
	done
	return 0
}

function show_settings {
	settingstr=$(
cat <<EOF
$BLD
    $UND\0Environment        $OFF$BLD
    Most recent tag             :$OFF $lasttag$BLD
 b  Current git branch          :$OFF $gitbranch$BLD
 d  Patch directory             :$OFF $indir$BLD has$OFF $infilecount$BLD files
 w  Work directory              :$OFF $outdir$BLD
 e  Editor                      :$OFF $editor$BLD

    $UND\0Run Parameters     $OFF$BLD
 1  Rename input files          :$OFF $b_rename_infiles$BLD
 2  Apply patches (git am)      :$OFF $b_apply_patches$BLD
 3  git am abort on error       :$OFF $b_gitam_err_abort$BLD
 4  Format upstream patches     :$OFF $b_fmt_upstream$BLD
 5  Size of commit hash         :$OFF $(show_hash_size $b_40digit)$BLD digits
 6  Compare mode                :$OFF $(show_cmpmode $cmpmode)$BLD

    $UND\0Control            $OFF$BLD
 r  Run patch review
 i  Init to defaults
 h  help text
 x  Exit to a shell
 q  Quit this script
$OFF
EOF
)
	echo -e "$settingstr"
}

function menu_parser {

	infilecount=$(ls "$indir" | wc -l)
	show_settings
	promptgetchar ""$BLD"Enter one of the above: "$OFF"" setting

	case $setting in

		b )	git_setbranch
			git_get_lasttag lasttag $last_tag_file
			;;
		m )	set_mailclient
			;;
		d )	prj_set_directory "RHEL" $prj_indir indir quiet
			;;
		w )	prj_set_directory "Upstream" $prj_outdir outdir quiet
			;;
		e )	set_editor
			;;
		1 )	ui_toggle b_rename_infiles
			;;
		2 )	ui_toggle b_apply_patches
			;;
		3 )	ui_toggle b_gitam_err_abort
			;;
		4 )	ui_toggle b_fmt_upstream
			;;
		5 )	ui_toggle b_40digit
			;;
		6 )	ui_cycle_state cmpmode 3
			prj_set_item $prj_cmpmode $cmpmode
			;;
		i )	init_booleans
			get_booleans
			;;
		q )	exit_patchdevelop 0
			;;
		x )	set_booleans
			ui_sh_spawn
			;;
		r )	set_booleans
			return $rc_run
			;;
		h )	less $manual
			;;
	esac
	return $rc_continue
}

function menu_loop {
	get_booleans

	# get the patch and work directories.
	#
	check_dir $prj_indir "RHEL" indir
	check_dir $prj_outdir "Upstream" outdir

	# get the editor
	#
	editor=$(prj_get_item $prj_editor)

	# get the comparison mode
	#
	cmpmode=$(prj_get_item $prj_cmpmode)

	# delete any "scratch" file from the indir
	#
	rm -f "$indir"/scratch

	local stat=0

	while true; do
		menu_parser
		stat=$?
		# echo "menu_parser_stat: $stat"
		[ $stat -eq $rc_run ] && break
	done
	return $stat
}

#############################
# Start of Script Execution
#############################

# Trap for control-c
#
trap control_c SIGINT

# Save our current shell level.
#
myshlvl=$SHLVL

# Print the Herald
#
echo -e ""$BLD""$UND""
echo "Patch Develop $version - Check backported patches with upstream"
echo -e "$OFF"

! $(git_checkrepo) && git_invrepomsg && exit 1

###########################################
# Parameter Initialization
###########################################

git_get_lasttag lasttag $last_tag_file

# This loop enumerates and counts the items in the project file.
# Add new booleans to the end of the list.
# Add new non-boolean parameters to the top of the list.
#
for offset in \
prj_cmpmode \
prj_editor \
prj_mode \
prj_indir \
prj_outdir \
prj_b_rename_infiles \
prj_b_apply_patches \
prj_b_fmt_upstream \
prj_b_gitam_err_abort \
prj_b_40digit
do
	let index++
	let $offset=$index
	if [ "${offset:3:3}" == "_b_" ]; then
		let boolcount++
		if ! $b_found_first_bool; then
			boolindex=$index
			b_found_first_bool=true
		fi
	fi
done

prj_entries=$index
[ -d "$HOME/bin/.data" ] || mkdir $HOME/bin/.data
[ -e "$HOME/bin/.data/patchdevelop.prj" ] || touch $HOME/bin/.data/patchdevelop.prj
prj_init_prjfile ~/bin/.data/patchdevelop.prj $prj_entries

# If the above call to prj_init_prjfile returns nonzero, it means that a
# new project file has been created and its values must be initialized.
#
if [ $? -ne 0 ]; then
	echo
	echo "A new project file has been created."
	echo "We will need to know where your patches will be and where you"
	echo "want us to put the output of this script."
	prj_set_directory "RHEL" $prj_indir indir quiet
	prj_set_directory "Upstream" $prj_outdir outdir quiet
	set_editor
	init_booleans
	cmpmode=$cmpmode_batch
	prj_set_item $prj_cmpmode $cmpmode
fi

##############################################
# Main Program Loop
##############################################

while true; do
	menu_loop
	menu_stat=$?
	# echo "menu_loop_stat: $menu_stat"

	if $b_rename_infiles; then
		exec_boolean b_rename_infiles false "renpat $indir"
		[ $? -ne 0 ] && continue
	fi

	if $b_apply_patches; then
		git am --abort
		patchcount=0
		exec_boolean b_apply_patches false "apply_patches"
		st=$?
	fi

	# Generate a patch set from the original upstream patches.
	#
	if $b_fmt_upstream; then
		rm -vf "$outdir"/*.patch
		echo "" > "$outdir/$us_commits"
		echo
		git_comment2commitsfile $indir "$outdir/$us_commits" $b_40digit
		echo
		cat "$outdir/$us_commits"
		echo
		exec_boolean b_fmt_upstream false \
			"git_file2patchset ${outdir}/"$us_commits" ${outdir}"
	fi

	if [ $cmpmode -ne $cmpmode_off ]; then

		mmfile="$outdir/$mismatch_file"

		# Mismatch file might be stale, so delete it first,
		# if it exists. Better to create a new one.
		#
		[ -f $mmfile ] && rm -f $mmfile

		if [ $cmpmode -eq $cmpmode_batch ]; then
			patbatcmpmgr -R $indir -U $outdir -o $mmfile
			patcmp -m $mmfile $indir $outdir $editor
			[ -f $mmfile ] && rm -f $mmfile
		elif [ $cmpmode -eq $cmpmode_inter ]; then
			patcmp $indir $outdir $editor
		else
			cmpmode=$cmpmode_off
		fi
	fi

	if [ $menu_stat -eq $rc_run ]; then

		# Backout of any residual child shells.
		#
		ui_sh_backout $myshlvl
	fi
done

# Done with the patch review
#
exit_patchdevelop 0

