#!/bin/bash
#
# patchdevelop - based on patchreview v3.1
version="3.2"
#
# This script assumes that you have already extracted your patches into
# the directory named as "indir" below. Only files named "*.patch" will
# be considered.
#
# To create a patch set from email ...
# In mutt, tag the thread you want to extract with esc-t. Untag the
# prologue, as it's not a patch. Then extract the thread into text
# files using ;-esc-C (uppercase C). When prompted for the directory,
# type the name of the mailbox directory or uparrow to the previous
# save.
#
# This script can also be used to compare any two patch sets.

# Calls on the following external scripts.#
#
# ~/bin/ren*pat
# ~/bin/patcmp

# Requires to run ...
#
# lib/*.source
# .data/patchdevelop.prj
# man/patchdevelop.man

# Enable extglob for more specific directory actions
#
shopt -s extglob

LIB="$HOME/bin/lib"
manual="$HOME/bin/man/patchdevelop.txt"

#######################################
# External Source Files
#######################################
source $LIB/ui.source
source $LIB/project.source
source $LIB/gitutilities.source
source $LIB/patch-common.source

########################################
# Function Return Codes
########################################
declare rc_continue=0	# Continue for another pass
declare rc_run=1	# Run patchdevelop

#########################################
# Functions
#########################################

function exit_patchdevelop {
	set_booleans
	exit $1
}

function init_booleans {
	for ((index=boolindex; index <= prj_entries; index++)); do
		prj_set_item $index true
	done
}

# get_booleans
#
# Read the values of the program flow control booleans from the
# project file.
#
function get_booleans {
	index=$boolindex
	for bool in \
	b_rename_infiles \
	b_save_githead \
	b_apply_patches \
	b_fmt_upstream \
	b_patcmp \
	b_gitam_err_abort
	do
		eval $bool=$(prj_get_item $index)
		ui_digit2bool $bool
		let index++
	done
}


# set_booleans
#
# Write the current values of the program flow booleans into the
# project file.
#
function set_booleans {
	index=$boolindex
	for bool in \
	b_rename_infiles \
	b_save_githead \
	b_apply_patches \
	b_fmt_upstream \
	b_patcmp \
	b_gitam_err_abort
	do
		prj_set_item $index ${!bool}
		let index++
	done
	return 0
}

function show_settings {
	settingstr=$(
cat <<EOF
$attr_bold
    $attr_under\0Environment        $attr_OFF$attr_bold
 b  Current git branch		: $gitbranch
 m  Mail client                 : $mailclient
 d  Patch directory		: $indir has $infilecount files
 w  Work directory		: $outdir

    $attr_under\0Run Parameters     $attr_OFF$attr_bold
 1  Rename input files		: $b_rename_infiles
 2  Apply patches (git am)	: $b_apply_patches
 3  git am abort on error  	: $b_gitam_err_abort
 4  Format upstream patches	: $b_fmt_upstream
 5  Compare patchsets		: $b_patcmp

    $attr_under\0Control            $attr_OFF$attr_bold
 r  Run patch review
 i  Init to defaults
 p  Replace an upstream commit in the series
 h  help text
 x  Exit to a shell
 q  Quit this script
$attr_OFF
EOF
)
	echo -e "$settingstr"
}

function menu_parser {

	infilecount=$(ls "$indir" | wc -l)
	show_settings
	promptgetchar ""$attr_bold"Enter one of the above: "$attr_OFF"" setting

	case $setting in

		b )	git_setbranch
			;;
		m )	set_mailclient
			;;
		d )	prj_set_directory "Patch" $prj_indir indir quiet
			;;
		w )	prj_set_directory "Work" $prj_outdir outdir quiet
			;;
		1 )	ui_toggle b_rename_infiles
			;;
		2 )	ui_toggle b_apply_patches
			;;
		3 )	ui_toggle b_gitam_err_abort
			;;
		4 )	ui_toggle b_fmt_upstream
			;;
		5 )	ui_toggle b_patcmp
			;;
		i )	init_booleans
			get_booleans
			;;
		p )	replace_patch
			;;
		q )	exit_patchdevelop 0
			;;
		x )	set_booleans
			ui_sh_spawn
			;;
		r )	set_booleans
			return $rc_run
			;;
		h )	less $manual
			;;
	esac
	return $rc_continue
}

function menu_loop {
	get_booleans

	# get the patch and work directories.
	#
	check_dir $prj_indir "Patch" indir
	check_dir $prj_outdir "Work" outdir

	# get the mail client
	#
	mailclient=$(prj_get_item $prj_mailclient)
	set_renameagent

	# delete any "scratch" file from the indir
	#
	rm -f "$indir"/scratch

	local stat=0

	while $true; do
		menu_parser
		stat=$?
		# echo "menu_parser_stat: $stat"
		[ $stat -eq $rc_run ] && break
	done
	return $stat
}

#############################
# Start of Script Execution
#############################

# Save our current shell level.
#
myshlvl=$SHLVL

# Print the Herald
#
echo -e ""$attr_bold""$attr_under""
echo "Patch Develop $version - Check backported patches with upstream"
echo -e "$attr_OFF"

! $(git_checkrepo) && git_invrepomsg && exit 1

echo -en "$attr_bold"
echo -en "Press \"q\" to quit or \"x\" to spawn a new shell "
echo -e  "at any \"(y/n)\" prompt."
echo -en "$attr_OFF"

###########################################
# Parameter Initialization
###########################################

# This loop enumerates and counts the items in the project file.
# Add new booleans to the end of the list.
# Add new non-boolean parameters to the top of the list.
#
for offset in \
prj_mode \
prj_indir \
prj_outdir \
prj_mailclient \
prj_b_rename_infiles \
prj_b_apply_patches \
prj_b_fmt_upstream \
prj_b_patcmp \
prj_b_gitam_err_abort
do
	let index++
	let $offset=$index
	if [ "${offset:3:3}" == "_b_" ]; then
		let boolcount++
		if ! $b_found_first_bool; then
			boolindex=$index
			b_found_first_bool=true
		fi
	fi
done

prj_entries=$index
[ -d "$HOME/bin/.data" ] || mkdir $HOME/bin/.data
[ -e "$HOME/bin/.data/patchdevelop.prj" ] || touch $HOME/bin/.data/patchdevelop.prj
prj_init_prjfile ~/bin/.data/patchdevelop.prj $prj_entries

# If the above call to prj_init_prjfile returns nonzero, it means that a
# new project file has been created and its values must be initialized.
#
if [ $? -ne 0 ]; then
	echo
	echo "A new project file has been created."
	echo "We will need to know where your patches will be and where you"
	echo "want us to put the output of this script."
	prj_set_directory "Patch" $prj_indir indir quiet
	prj_set_directory "Work" $prj_outdir outdir quiet
	set_mailclient
	init_booleans
fi

##############################################
# Main Program Loop
##############################################

while true; do
	menu_loop
	menu_stat=$?
	# echo "menu_loop_stat: $menu_stat"

	if $b_rename_infiles; then
		exec_boolean b_rename_infiles false "$renameagent $indir"
		[ $? -ne 0 ] && continue
	fi

	if $b_apply_patches; then
		git am --abort
		patchcount=0
		exec_boolean b_apply_patches false "apply_patches"
		st=$?
	fi

	# Generate a patch set from the original upstream patches.
	#
	if $b_fmt_upstream; then
		rm -vf "$outdir"/*.patch
		echo "" > "$outdir/$us_commits"
		echo
		git_comment2commitsfile $indir "$outdir/$us_commits"
		echo
		cat "$outdir/$us_commits"
		echo
		exec_boolean b_fmt_upstream false \
			"git_file2patchset ${outdir}/"$us_commits" ${outdir}"
	fi

	if $b_patcmp; then
		patcmp $indir $outdir 'return to main menu'
		stat=$?
		[ $stat -eq 1 ] && continue
		[ $stat -eq 2 ] && exit
	fi

	if [ $menu_stat -eq $rc_run ]; then

		# Backout of any residual child shells.
		#
		ui_sh_backout $myshlvl
	fi
done

# Done with the patch review
#
exit_patchdevelop 0

