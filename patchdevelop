#!/bin/bash
#
# patchdevelop - based on patchreview

# This script assumes that you have already extracted your patches into
# the directory named as "indir" below. Only files named "*.patch" will
# be considered.
#
# To create a patch set from email ...
# In mutt, tag the thread you want to extract with esc-t. Untag the
# prologue, as it's not a patch. Then extract the thread into text
# files using ;-esc-C (uppercase C). When prompted for the directory,
# type the name of the mailbox directory or uparrow to the previous
# save.
#
# This script can also be used to compare any two patch sets.

# Calls on the following external scripts.
#
# ./githead
# ./patcmp
# ./patbatcmp
# ./patbatcmpmgr
#
# Requires to run ...
#
# ./lib/*.source
# ./.data/patchreview.prj
# ./man/patchreview.man

#######################################
# Default file locations
#######################################
#
# Whatever directory this script and its companions are located in
# must be in the executable path.
#
# export PATH=$PATH:MYDIR
#
# Where MYDIR is the directory in which this script and its companions
# are located.
#
declare MYDIR=$(dirname $(which $(basename $0)))
declare MYLIB=$MYDIR/lib

#######################################
# External Source Files
#######################################
source $MYLIB/ui.source
source $MYLIB/project.source
source $MYLIB/gitutilities.source
source $MYLIB/patch-common.source

#########################################
# Functions
#########################################

function init_booleans {
	for ((index=boolindex; index <= prj_entries; index++)); do
		prj_set_item $index true
	done
	b_prologue=false
}

# get_booleans
#
# Read the values of the program flow control booleans from the
# project file.
#
# removed in v4.4
# 	b_patcmp
# 	b_patbatcmp
#
# added in v4.4
# 	b_40digit
#
# removed in v5.0
#	b_apply_patches
#
# removed in v7.0
# 	b_save_githead
# 	b_gitam_err_abort
#
function get_booleans {
	index=$boolindex
	for bool in \
	b_rename_infiles \
	b_fmt_upstream \
	b_40digit
	do
		eval $bool=$(prj_get_item $index)
		ui_digit2bool $bool
		let index++
	done
}


# set_booleans
#
# Write the current values of the program flow booleans into the
# project file.
#
# removed in v4.4
# 	b_patcmp
# 	b_patbatcmp
#
# added in v4.4
# 	b_40digit
#
# removed in v5.0
#	b_apply_patches
#
# removed in v7.0
# 	b_save_githead
# 	b_gitam_err_abort
#
function set_booleans {
	index=$boolindex
	for bool in \
	b_rename_infiles \
	b_fmt_upstream \
	b_40digit
	do
		prj_set_item $index ${!bool}
		let index++
	done
	b_prologue=false
	return 0
}

# show_settings - the main menu display
#
# Globals:
# 	indir
# 	outdir
# 	lasttag
# 	gitbranch
# 	infilecount
# 	patstr
# 	editor
# 	b_rename_infiles
# 	b_fmt_upstream
#
show_settings() {
	local current_head_trunc=$(get_current_head_trunc $menucols)
	local s	settingstr=$(
cat <<EOF
$BLD
    $UND\0Environment       $OFF$BLD
    Most recent tag         :$OFF $lasttag$BLD
    Current head            :$OFF $current_head_trunc$BLD
 b  Current git branch      :$OFF $gitbranch$BLD
 d  $indirstr directory         :$OFF $indir$BLD has$OFF $infilecount$BLD $patstr\0files
 w  $outdirstr directory          :$OFF $outdir$BLD
 e  Diff Editor             :$OFF $editor$BLD

    $UND\0Run Parameters    $OFF$BLD
 1  Compare mode            :$OFF $(show_cmpmode $cmpmode)$BLD
 2  Patch apply mode        :$OFF $(show_applymode)$BLD
 3  Patch apply fail mode   :$OFF $(show_applyfailmode)$BLD
 4  Patch seek mode         :$OFF $(show_patchseekmode)$BLD\
 $(show_nextpatch)

    $UND\0Control           $OFF$BLD
 r  Run patch review
 i  Init to defaults
 R  Rename mail files in    :$OFF $indir$BLD
 F  Format commits into     :$OFF $outdir$BLD
 S  Seek missing commits \
 $(show_apply_patches)$BLD
 P  Compare Patches
 B  Create a new branch at  :$OFF $current_head_trunc$BLD
 h  help text
 q  Quit this script
$OFF
EOF
)
	echo -e "$settingstr"
}

menu_parser() {
	get_filecount
	show_settings
	promptgetchar ""$BLD"Enter one of the above: "$OFF"" setting

	case $setting in

		b )	git_setbranch $branchlist
			git_get_lasttag lasttag $last_tag_file
			gitbranch=$(git_getcurrentbranch)
			;;
		d )	prj_set_directory "$indirstr" $prj_indir indir quiet
			;;
		w )	prj_set_directory "$outdirstr" $prj_outdir outdir quiet
			;;
		e )	set_editor
			;;
		R )	renpatfiles
			;;
		F )	format_upstream_patches
			check_fixes "$us_commits"
			;;
		S )	[ -f "$us_commits" ] || format_upstream_patches
			check_fixes "$us_commits" "$starting_head"
			;;
		A )	[ $applymode -ne $applymode_off ] && ! $b_allapplied \
				&& exec_apply_patches
			;;
		1 )	ui_cycle_state cmpmode $cmpmode_states
			prj_set_item $prj_cmpmode $cmpmode
			;;
		2 )	ui_cycle_state applymode $applymode_states
			prj_set_item $prj_applymode $applymode
			;;
		3 )	ui_cycle_state applyfailmode $applyfailmode_states
			prj_set_item $prj_applyfailmode $applyfailmode
			;;
		4 )	ui_cycle_state patchseekmode $patchseek_states
			prj_set_item $prj_patchseekmode $patchseekmode
			;;
		5 )	$b_selpat && select_patch
			;;
		i )	init_menu
			;;
		B )	create_branch
			;;
		P )	compare_patches
			;;
		q )	exit_me 0
			;;
		r )	set_booleans
			return $rc_run
			;;
		h )	less $manual
			;;
	esac
	return $rc_continue
}

function menu_loop {
	get_booleans

	# get the patch and work directories.
	#
	check_dir $prj_indir "$indirstr" indir
	check_dir $prj_outdir "$outdirstr" outdir
	bp_commits="$indir/$bp_commits_name"
	us_commits="$outdir/$us_commits_name"
	mmfile="$outdir/$mismatch_file"

	# get the editor
	#
	editor=$(prj_get_item $prj_editor)

	# get the comparison mode
	#
	cmpmode=$(prj_get_item $prj_cmpmode)
	applymode=$(prj_get_item $prj_applymode)
	applyfailmode=$(prj_get_item $prj_applyfailmode)
	patchseekmode=$(prj_get_item $prj_patchseekmode)

	# delete any "scratch" file from the indir
	#
	rm -f "$indir"/scratch

	local stat=0

	while true; do
		menu_parser
		stat=$?
		# echo "menu_parser_stat: $stat"
		[ $stat -eq $rc_run ] && break
	done
	return $stat
}

###########################################
# Parameter Initialization
###########################################
init_parms() {
	git_get_lasttag lasttag $last_tag_file

	# This loop enumerates and counts the items in the project file.
	# Add new booleans to the end of the list.
	# Add new non-boolean parameters to the top of the list.
	#
	for offset in \
	prj_patchseekmode \
	prj_applyfailmode \
	prj_applymode \
	prj_cmpmode \
	prj_editor \
	prj_indir \
	prj_outdir \
	prj_b_rename_infiles \
	prj_b_fmt_upstream \
	prj_b_40digit
	do
		let index++
		let $offset=$index
		if [ "${offset:3:3}" == "_b_" ]; then
			let boolcount++
			if ! $b_found_first_bool; then
				boolindex=$index
				b_found_first_bool=true
			fi
		fi
	done

	prj_entries=$index
	[ -d "$MYDATA" ] || mkdir $MYDATA
	[ -e "$MYDATA/patchdevelop.prj" ] || touch $MYDATA/patchdevelop.prj
	prj_init_prjfile $MYDATA/patchdevelop.prj $prj_entries

	# If the above call to prj_init_prjfile returns nonzero, it means that a
	# new project file has been created and its values must be initialized.
	#
	if [ $? -ne 0 ]; then
		echo
		echo "A new project file has been created."
		echo "We will need to know where your patches will be and where you"
		echo "want us to put the output of this script."
		prj_set_directory "$indirstr" $prj_indir indir quiet
		prj_set_directory "$outdirstr" $prj_outdir outdir quiet
		set_editor
		init_booleans
		cmpmode=$cmpmode_batch
		applymode=$applymode_norm
		applyfailmode=$applyfailmode_exit
		patchseekmode=$patchseek_off
		prj_set_item $prj_cmpmode $cmpmode
		prj_set_item $prj_applymode $applymode
		prj_set_item $prj_applyfailmode $applyfailmode
		prj_set_item $prj_patchseekmode $patchseekmode
	fi
}

#############################
# main() entry point
#############################
main() {
	local stat

	# Trap for control-c
	#
	trap control_c SIGINT

	# Print the Herald
	#
	echo -e ""$BLD""$UND""
	echo "Patch Develop $version  Check backported patches with upstream"
	echo -e "$OFF"

	! $(git_checkrepo) && git_invrepomsg && exit 1

	init_parms

	##############################################
	# Main Program Loop
	##############################################

	while true; do
		menu_loop
		menu_stat=$?
		# echo "menu_loop_stat: $menu_stat"

		if $b_rename_infiles; then
			exec_boolean b_rename_infiles false "renpatfiles"
			[ $? -ne 0 ] && continue
		fi

		$b_fmt_upstream && format_upstream_patches

		if [ $patchseekmode -eq $patchseek_on ]; then
			[ -f "$us_commits" ] || format_upstream_patches
			check_fixes "$us_commits" "$starting_head"
		fi

		if [ $applymode -ne $applymode_off ]; then
			exec_apply_patches
			[ $? -ne 0 ] && continue
		fi

		[ $cmpmode -ne $cmpmode_off ] && compare_patches
	done
}

# Call main.
# Exit when done.
#
main
exit_me 0

