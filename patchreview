#!/bin/bash
#
# patchreview
#
# This script assumes that you have already extracted your patches into
# the directory named as "indir" below. Only files named "*.patch" will
# be considered.
#
# To create a patch set from email ...
# In mutt, tag the thread you want to extract with esc-t. Untag the
# prologue, as it's not a patch. Then extract the thread into text
# files using ;-esc-C (uppercase C). When prompted for the directory,
# type the name of the mailbox directory or uparrow to the previous
# save.
#
# This script can also be used to compare any two patch sets.

# Calls on the following external scripts.#
#
# ~/bin/githead
# ~/bin/gitreset
# ~/bin/renpat
# ~/bin/genpatset


# This script needs a bash library source file
#
source ~/bin/lib/ui.source
source ~/bin/lib/project.source
source ~/bin/lib/gitutilities.source

b_ui_int_first_getyn=false

# Save our current shell level.
#
myshlvl=$SHLVL

# Herald
#
echo
echo "Patch Review v0.1 - compare two patch sets"
echo
echo "Press \"q\" to quit or \"x\" to spawn a new shell at any \"(y/n)\" prompt."
echo

# Project file parameters.
#
prj_indir=1	# Offset in prjfile to name of directory for source patches
prj_outdir=2	# Offset in prjfile to name of directory for destination patches
prj_entries=2

prj_init_prjfile ~/bin/.data/patchreview.prj $prj_entries
prj_set_directory "source" $prj_indir indir
prj_set_directory "destination" $prj_outdir outdir

echo -e ""$attr_bold"These are the files in "$indir""$attr_OFF"."
ls $indir

# Rename the files in source directory to something-xx.yy.patch
#
# NOTE: Makes a call to external script ~/bin/renpat
#
getyn "Rename files in "$indir"?" yes
if $yes; then
	getuser "Prefix to rename files in "$indir": " pfx
	echo "Renaming files ..."
	~/bin/renpat $indir "$pfx"
fi

# Save the starting githead.
#
doyn "Save the current git head to restore later?" "~/bin/githead"

# Apply the patches ...
# If something goes wrong, spawn a shell.
#
getyn "Apply the patches?" yes
if $yes; then
	git am $indir/*.patch
	getyn "Do you have conflicts to fix?" conflicts
	if $conflicts; then
		doyn "Do you want to abort the git-am?" "git am --abort"
		echo "Spawning a new shell so you can edit conflicts."
		echo "Type \"exit\" or \"ctrl-D\" to return here."
		bash
	fi
fi

# Generate a patch set from the original upstream patches.
#
git_comment2commitsfile $indir "$outdir/commits.log"
getyn "Generate a patch set from the upstream commits?" yes
$yes && git_file2patchset "$outdir/commits.log" "$outdir"

# Compare the upstream and RHEL patches.
#
# calls external script ~/bin/patcmp
#
getyn "\nCompare the patchset in "$indir"\n\
with the patchset in "$outdir" now?" yes
$yes && ~/bin/patcmp $indir $outdir

# Done with the patch review
#
echo
echo "Patch review completed."
echo
echo "Contents of "$indir"."
ls $indir
echo
doyn "Delete contents of "$indir"?" "rm -vf $indir/*"
echo
ls $outdir
echo
doyn "Delete contents of "$outdir"?" "rm -vf $outdir/*"
echo
echo "The head of the git tree before you started patchreview was ..."
echo
git log --pretty -n1 $(cat ../githead)
echo
doyn "Reset the git head to the one you started with?" "~/bin/gitreset"

# Backout of any residual child shells.
#
ui_sh_backout $myshlvl
echo
echo "patchreview exiting ..."
echo
