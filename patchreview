#!/bin/bash
#
# patchreview
#
# This script assumes that you have already extracted your patches into
# the directory named as "indir" below. Only files named "*.patch" will
# be considered.
#
# To create a patch set from email ...
# In mutt, tag the thread you want to extract with esc-t. Untag the
# prologue, as it's not a patch. Then extract the thread into text
# files using ;-esc-C (uppercase C). When prompted for the directory,
# type the name of the mailbox directory or uparrow to the previous
# save.
#
# This script can also be used to compare any two patch sets.
#
# Calls on the following external scripts.
#
# ./githead
# ./patcmp
# ./patbatcmp
# ./patbatcmpmgr
#
# Requires to run ...
#
# ./lib/*.source
# ./.data/patchreview.prj
# ./man/patchreview.man

#######################################
# Default file locations
#######################################
#
# Whatever directory this script and its companions are located in
# must be in the executable path.
#
# export PATH=$PATH:MYDIR
#
# Where MYDIR is the directory in which this script and its companions
# are located.

declare MYDIR=$(dirname $(which $(basename $0)))
declare MYLIB=$MYDIR/lib

#######################################
# External Source Files
#######################################
source $MYLIB/ui.source
source $MYLIB/project.source
source $MYLIB/gitutilities.source
source $MYLIB/patch-common.source

#########################################
# Functions
#########################################

function init_booleans {
	for ((index=boolindex; index <= prj_entries; index++)); do
		prj_set_item $index true
	done
	b_prologue=false
}

# get_booleans
#
# Read the values of the program flow control booleans from the
# project file.
#
# removed in v3.0
#	b_restore_githead
#	b_clean_indir
#	b_clean_outdir
#
# added in v 4.0
#	b_patbatcmp
#
# removed in v4.4
# 	b_patcmp
# 	b_patbatcmp
#
# added in v4.4
# 	b_40digit
#
# removed in v5.0
#	b_apply_patches
#
# removed in v7.0
# 	b_save_githead
# 	b_gitam_err_abort
#
# removed in v9.0
#	b_40digit
#
# added in v9.0
#	b_extmenu
#
# removed in v9.1
# 	b_extmenu
#
function get_booleans {
	# echo "patchreview::get_booleans()"
	local bool
	index=$boolindex
	for bool in \
	b_rename_infiles \
	b_fmt_upstream
	do
		eval $bool=$(prj_get_item $index)
		ui_digit2bool $bool
		let index++
	done
}

# set_booleans
#
# Write the current values of the program flow booleans into the
# project file.
#
# removed in v3.0
#	b_restore_githead \
#	b_clean_indir \
#	b_clean_outdir \
#
# added in v 4.0
#	b_patbatcmp
#
# removed in v4.4
# 	b_patcmp
# 	b_patbatcmp
#
# added in v4.4
# 	b_40digit
#
# removed in v5.0
#	b_apply_patches
#
# removed in v7.0
# 	b_save_githead
# 	b_gitam_err_abort
#
# removed in v9.0
#	b_40digit
#
# added in v9.0
#	b_extmenu
#
# removed in v9.1
# 	b_extmenu
#
function set_booleans {
	# echo "patchreview::set_booleans()"
	local bool
	index=$boolindex
	for bool in \
	b_rename_infiles \
	b_fmt_upstream
	do
		prj_set_item $index ${!bool}
		let index++
	done
	b_prologue=false
	return 0
}

function clean_dir {
	local delquery="Are you sure you want to delete the contents of:"
	local response=false

	getyn "$delquery\n\t$1\n" response
	$response && find "$1" -mindepth 1 -exec rm -rvf '{}' \;
}

clean_indir() {
	# remove everything in the indir, except any subdirs
	find $indir -maxdepth 1 -not -type d -exec rm -vf '{}' \;
}

clean_outdir() {
	find "$outdir" -maxdepth 1 -not -type d -exec rm -vf '{}' \;
	rm -vf $outdir/$mismatch_file
}

clean_directories() {
	local answer
	local cleanstr=$(
cat <<EOF

    $BLD$UND\0Clean Directory$OFF
    Select one of$BLD

 1  Clean $OFF$indir$BLD
 2  Clean $OFF$outdir$BLD
 3  Clean both
\0
EOF
)
	echo -e "$cleanstr"
	loop_range_q 1 3 answer
	[ $? -ne 0 ] && return

	case $answer in
		1 ) clean_indir
		    ;;
		2 ) clean_outdir
		    ;;
		3 ) clean_indir
		    clean_outdir
		    ;;
		* ) echo "Not a valid selection for Clean Directories"
	esac
}

# reset_to_lasttag - reset the current branch to its most recent tag
#
# Also checks that the saved lasttag is the same as the lasttag of the
# current branch. If they are not, the reset is not executed and the user
# is warned, because the results would be a merge of two branches.
#
# Globals:
# 	lasttag
#
reset_to_lasttag() {
	local newlasttag
	local head=$(git log --oneline -n1)
	git_get_lasttag newlasttag $last_tag_file
	local errstr=$(
cat <<EOF

$UND$BLD\0Warning!$OFF
It appears the head was moved outside of this script.
		Current branch: $BLD$(git_getcurrentbranch)$OFF
Most recent tag of that branch: $BLD$lasttag$OFF
Most recent tag in this script: $BLD$newlasttag$OFF

Please switch to the correct branch.
Not resetting the head.

\0
EOF
)
	[ "$newlasttag" =  "$lasttag" ] || { echo -e "$errstr"; return; }

	echo -e "$BLD\0Resetting git head to$OFF $lasttag."
	git reset --hard $lasttag
	b_allapplied=false
}

# nuke - delete files in indir and outdir, except logs, and reset to lasttag
#
#        Also calls the init sequence.
#
# Globals:
# 	indir
# 	outdir
# 	prj_applymode
# 	applymode
#
nuke() {
	clean_indir
	clean_outdir

	# Reset the git head to the last tag
	reset_to_lasttag

	# Init the booleans to their defaults
	init_booleans
	get_booleans

	# Set the apply mode to its default value
	applymode=$applymode_norm
	prj_set_item $prj_applymode $applymode
}

# show_settings - the main menu display
#
# Globals:
# 	indir
# 	outdir
# 	lasttag
# 	infilecount
# 	patstr
# 	editor
# 	b_rename_infiles
# 	b_fmt_upstream
#	b_extmenu
#
show_settings() {
	local current_head_trunc=$(get_current_head_trunc $menucols)
	local settingstr=$(
cat <<EOF
$BLD
    $UND\0Environment       $OFF$BLD
    Most recent tag         :$OFF $lasttag$BLD
    Current Head            :$OFF $current_head_trunc$BLD
 b  Current git branch      :$OFF $(git_getcurrentbranch)$BLD
 d  $indirstr directory         :$OFF $indir$BLD has$OFF $infilecount$BLD $patstr\0files
 w  $outdirstr directory          :$OFF $outdir$BLD
 e  Diff Editor             :$OFF $editor$BLD
 f  Patch Validation fuzz   :$OFF $(show_patchvalfuzz)$BLD

    $UND\0Batch Run Parameters$OFF$BLD
 1  Compare mode            :$OFF $(show_cmpmode)$BLD
 2  Patch apply mode        :$OFF $(show_applymode)$BLD
 3  Patch apply fail mode   :$OFF $(show_applyfailmode)$BLD
 4  Patch seek mode         :$OFF $(show_patchseekmode)$BLD\
 $(show_nextpatch)

    $UND\0Main Controls     $OFF$BLD
 r  Run in batch mode
 i  Init to defaults
 h  help text
 q  Quit this script
 x  Toggle Extended Menu
$OFF
EOF
)
	local extmenu=$(
cat <<EOF
$BLD\
    $UND\0Discrete Operations$OFF$BLD
 R  Rename mail files in    :$OFF $indir$BLD
 F  Format commits into     :$OFF $outdir$BLD
 S  Seek missing commits \
 $(show_apply_patches)$BLD
 P  Compare Patches
 G  Git reset to            :$OFF $lasttag$BLD
 B  Create a new branch at  :$OFF $current_head_trunc$BLD
 C  Clean the $OFF$indirstr$BLD and/or $OFF$outdirstr$BLD directories
 N  Nuke the directories and reset head to most recent tag \
 $(show_view_logs)$BLD
$OFF
EOF
)
	echo -e "$settingstr"
	[ $menumode -eq $menumode_ext ]  && echo -e "$extmenu"
}

menu_parser() {
	get_filecount
	show_settings
	promptgetchar ""$BLD"Enter one of the above: "$OFF"" setting

	case $setting in

		b )	git_setbranch $branchlist
			git_get_lasttag lasttag $last_tag_file
			;;
		d )	prj_set_directory "$indirstr" $prj_indir indir quiet
			;;
		w )	prj_set_directory "$outdirstr" $prj_outdir outdir quiet
			;;
		e )	set_editor
			;;
		f )	set_patchvalfuzz
			;;
		x )	ui_cycle_state menumode $menumode_states
			prj_set_item $prj_menumode $menumode
			;;
		R )	renpatfiles
			;;
		F )	format_upstream_patches
			;;
		S )	[ -f "$us_commits" ] || format_upstream_patches
			check_fixes "$us_commits"
			;;
		A )	[ $applymode -ne $applymode_off ] && ! $b_allapplied \
				&& exec_apply_patches
			;;
		V )	view_logs
			;;
		1 )	ui_cycle_state cmpmode $cmpmode_states
			prj_set_item $prj_cmpmode $cmpmode
			;;
		2 )	ui_cycle_state applymode $applymode_states
			prj_set_item $prj_applymode $applymode
			;;
		3 )	ui_cycle_state applyfailmode $applyfailmode_states
			prj_set_item $prj_applyfailmode $applyfailmode
			;;
		4 )	ui_cycle_state patchseekmode $patchseek_states
			prj_set_item $prj_patchseekmode $patchseekmode
			;;
		5 )	$b_selpat && select_patch
			;;
		C )	clean_directories
			;;
		N )	nuke
			;;
		G )	reset_to_lasttag
			rm -f $usvbp_commits
			;;
		B )	create_branch
			;;
		P )	compare_patches
			;;
		i )	init_menu
			;;
		q )	exit_me 0
			;;
		r )	set_booleans
			return $rc_run
			;;
		h )	less $manual
			;;
	esac
	return $rc_continue
}

function menu_loop {
	get_booleans

	# get the patch and work directories.
	#
	check_dir $prj_indir "$indirstr" indir
	check_dir $prj_outdir "$outdirstr" outdir
	bp_commits="$outdir/$bp_commits_name"
	us_commits="$outdir/$us_commits_name"
	usvbp_commits="$outdir/$usvbp_commits_name"
	mmfile="$outdir/$mismatch_file"

	# get the editor
	#
	editor=$(prj_get_item $prj_editor)

	# get the loop variables
	#
	cmpmode=$(prj_get_item $prj_cmpmode)
	applymode=$(prj_get_item $prj_applymode)
	applyfailmode=$(prj_get_item $prj_applyfailmode)
	patchseekmode=$(prj_get_item $prj_patchseekmode)
	patchvalfuzz=$(prj_get_item $prj_patchvalfuzz)
	menumode=$(prj_get_item $prj_menumode)

	# delete any "scratch" file from the indir
	#
	rm -f "$indir"/scratch

	local stat=0

	while true; do
		menu_parser
		stat=$?
		# echo "menu_parser_stat: $stat"
		[ $stat -eq $rc_run ] && break
	done
	return $stat
}

###########################################
# Parameter Initialization
###########################################
init_parms() {
	git_get_lasttag lasttag $last_tag_file

	# This loop enumerates and counts the items in the project file.
	# Add new booleans to the end of the list.
	# Add new non-boolean parameters before the first boolean, but
	# after all the non-booleans.
	#
	for offset in \
	prj_menumode \
	prj_patchvalfuzz \
	prj_patchseekmode \
	prj_applyfailmode \
	prj_applymode \
	prj_cmpmode \
	prj_editor \
	prj_indir \
	prj_outdir \
	prj_b_rename_infiles \
	prj_b_fmt_upstream
	do
		let index++
		let $offset=$index
		if [ "${offset:3:3}" == "_b_" ]; then
			let boolcount++
			if ! $b_found_first_bool; then
				boolindex=$index
				b_found_first_bool=true
			fi
		fi
	done

	prj_entries=$index
	[ -d "$MYDATA" ] || mkdir $MYDATA
	[ -e "$MYDATA/patchreview.prj" ] || touch $MYDATA/patchreview.prj

	prj_init_prjfile_bools $MYDATA/patchreview.prj $prj_entries $boolindex

	# If the above call to prj_init_prjfile returns nonzero, it means that a
	# new project file has been created and its values must be initialized.
	#
	if [ $? -ne 0 ]; then
		echo
		echo "A new project file has been created, or the existing one"
		echo "must be recreated."
		echo "We will need to know where your patches will be, where you"
		echo "want us to put the output of this script, and your choice"
		echo "of editor."
		echo
		prj_set_directory "$indirstr" $prj_indir indir quiet
		prj_set_directory "$outdirstr" $prj_outdir outdir quiet
		set_editor
		init_booleans
		cmpmode=$cmpmode_batch
		applymode=$applymode_norm
		applyfailmode=$applyfailmode_exit
		patchseekmode=$patchseek_off
		patchvalfuzz=1
		menumode=$menumode_ext
		prj_set_item $prj_cmpmode $cmpmode
		prj_set_item $prj_applymode $applymode
		prj_set_item $prj_applyfailmode $applyfailmode
		prj_set_item $prj_patchseekmode $patchseekmode
		prj_set_item $prj_patchvalfuzz $patchvalfuzz
		prj_set_item $prj_menumode $menumode
	fi
}

#############################
# main() entry point
#############################
main() {
	local stat

	# Trap for control-c
	#
	trap control_c SIGINT

	# Print the Herald
	#
	echo -e ""$BLD""$UND""
	echo "Patch Review $version  Review patches and compare to upstream"
	echo -e "$OFF"

	! $(git_checkrepo) && git_invrepomsg && exit 1

	init_parms

	##############################################
	# Main Program Loop
	##############################################

	while true; do
		menu_loop
		menu_stat=$?
		# echo "menu_loop_stat: $menu_stat"

		if $b_rename_infiles; then
			exec_boolean b_rename_infiles false "renpatfiles"
			[ $? -ne 0 ] && continue
		fi

		$b_fmt_upstream && format_upstream_patches

		if [ $patchseekmode -eq $patchseek_on ]; then
			[ -f "$us_commits" ] || format_upstream_patches
			check_fixes "$us_commits"
		fi

		if [ $applymode -ne $applymode_off ]; then
			exec_apply_patches
			[ $? -ne 0 ] && continue
		fi

		[ $cmpmode -ne $cmpmode_off ] && compare_patches
	done
}

# Call main.
# Exit when done.
#
main
exit_me 0
