#!/bin/bash
#
# patchreview
#
# This script assumes that you have already extracted your patches into
# the directory named as "indir" below. Only files named "*.patch" will
# be considered.
#
# To create a patch set from email ...
# In mutt, tag the thread you want to extract with esc-t. Untag the
# prologue, as it's not a patch. Then extract the thread into text
# files using ;-esc-C (uppercase C). When prompted for the directory,
# type the name of the mailbox directory or uparrow to the previous
# save.
#
# This script can also be used to compare any two patch sets.
#
# Calls on the following external scripts.
#
# ./githead
# ./patcmp
# ./patbatcmp
# ./patbatcmpmgr
#
# Requires to run ...
#
# ./lib/*.source
# ./.data/patchreview.prj
# ./man/patchreview.man

#######################################
# Default file locations
#######################################
#
# Whatever directory this script and its companions are located in
# must be in the executable path.
#
# export PATH=$PATH:MYDIR
#
# Where MYDIR is the directory in which this script and its companions
# are located.

declare MYDIR=$(dirname $(which $(basename $0)))
declare MYLIB=$MYDIR/lib

#######################################
# External Source Files
#######################################
source $MYLIB/ui.source
source $MYLIB/project.source
source $MYLIB/gitutilities.source
source $MYLIB/patch-common.source

#########################################
# Functions
#########################################

function init_booleans {
	b_prologue=false

	[ $index -eq 0 ] && return
	for ((index=boolindex; index <= prj_entries; index++)); do
		prj_set_item $index true
	done
}

# get_booleans
#
# Read the values of the program flow control booleans from the
# project file.
#
# removed in v3.0
#	b_restore_githead
#	b_clean_indir
#	b_clean_outdir
#
# added in v 4.0
#	b_patbatcmp
#
# removed in v4.4
# 	b_patcmp
# 	b_patbatcmp
#
# added in v4.4
# 	b_40digit
#
# removed in v5.0
#	b_apply_patches
#
# removed in v7.0
# 	b_save_githead
# 	b_gitam_err_abort
#
# removed in v9.0
#	b_40digit
#
# added in v9.0
#	b_extmenu
#
# removed in v9.1
# 	b_extmenu
#
function get_booleans {
	# echo "patchreview::get_booleans()"
	local bool
	index=$boolindex
	[ $index -eq 0 ] && return
	for bool in \
	b_rename_infiles \
	b_fmt_upstream
	do
		eval $bool=$(prj_get_item $index)
		ui_digit2bool $bool
		let index++
	done
}

# set_booleans
#
# Write the current values of the program flow booleans into the
# project file.
#
# removed in v3.0
#	b_restore_githead \
#	b_clean_indir \
#	b_clean_outdir \
#
# added in v 4.0
#	b_patbatcmp
#
# removed in v4.4
# 	b_patcmp
# 	b_patbatcmp
#
# added in v4.4
# 	b_40digit
#
# removed in v5.0
#	b_apply_patches
#
# removed in v7.0
# 	b_save_githead
# 	b_gitam_err_abort
#
# removed in v9.0
#	b_40digit
#
# added in v9.0
#	b_extmenu
#
# removed in v9.1
# 	b_extmenu
#
function set_booleans {
	# echo "patchreview::set_booleans()"
	local bool
	index=$boolindex
	[ $index -eq 0 ] && return 0
	for bool in \
	b_rename_infiles \
	b_fmt_upstream
	do
		prj_set_item $index ${!bool}
		let index++
	done
	b_prologue=false
	return 0
}

function clean_dir {
	local delquery="Are you sure you want to delete the contents of:"
	local response=false

	getyn "$delquery\n\t$1\n" response
	$response && find "$1" -mindepth 1 -exec rm -rvf '{}' \;
}

clean_indir() {
	# remove everything in the indir, except any subdirs
	find $indir -maxdepth 1 -not -type d -exec rm -vf '{}' \;
}

clean_outdir() {
	find "$outdir" -maxdepth 1 -not -type d -exec rm -vf '{}' \;
	rm -vf $outdir/$mismatch_file
}

clean_directories() {
	local answer
	local cleanstr=$(
cat <<EOF

    $BLD$UND\0Clean Directory$OFF
    Select one of$BLD

 1  Clean $OFF$indir$BLD
 2  Clean $OFF$outdir$BLD
 3  Clean both
\0
EOF
)
	echo -e "$cleanstr"
	loop_range_q 1 3 answer
	[ $? -ne 0 ] && return

	case $answer in
		1 ) clean_indir
		    ;;
		2 ) clean_outdir
		    ;;
		3 ) clean_indir
		    clean_outdir
		    ;;
		* ) echo "Not a valid selection for Clean Directories"
	esac
}

# reset_to_lasttag - reset the current branch to its most recent tag
#
# Also checks that the saved lasttag is the same as the lasttag of the
# current branch. If they are not, the reset is not executed and the user
# is warned, because the results would be a merge of two branches.
#
# Globals:
# 	lasttag
#
reset_to_lasttag() {
	local newlasttag
	local head=$(git log --oneline -n1)
	git_get_lasttag newlasttag $last_tag_file
	local errstr=$(
cat <<EOF

$UND$BLD\0Warning!$OFF
It appears the head was moved outside of this script.
		Current branch: $BLD$(git_getcurrentbranch)$OFF
Most recent tag of that branch: $BLD$lasttag$OFF
Most recent tag in this script: $BLD$newlasttag$OFF

Please switch to the correct branch.
Not resetting the head.

\0
EOF
)
	[ "$newlasttag" =  "$lasttag" ] || { echo -e "$errstr"; return; }

	echo -e "$BLD\0Resetting git head to$OFF $lasttag."
	git reset --hard $lasttag
	b_allapplied=false
}

# nuke - delete files in indir and outdir, except logs, and reset to lasttag
#
#        Also calls the init sequence.
#
# Globals:
# 	indir
# 	outdir
# 	prj_applymode
# 	applymode
#
nuke() {
	clean_indir
	clean_outdir

	# Reset the git head to the last tag
	reset_to_lasttag

	# Init the booleans to their defaults
	init_booleans
	get_booleans

	# Set the apply mode to its default value
	applymode=$applymode_norm
	prj_set_item $prj_applymode $applymode
}

# show_settings - the main menu display
#
# Globals:
#	BLD, UND, STA, MNU, INF, OFF - lib/ui.source
# 	indir
# 	outdir
# 	lasttag
# 	infilecount
# 	patstr
# 	editor
#	b_extmenu        - removed 2020-07-31
# 	b_rename_infiles
# 	b_fmt_upstream
#
show_settings() {
	local current_head_trunc=$(get_current_head_trunc $menucols)
	local settingstr=$(
cat <<EOF
$MNU
    $UND\0Environment       $OFF
    Most recent tag         :$STA $lasttag$OFF
    Current Head            :$STA $current_head_trunc$OFF
$MNU b$OFF  Current git branch      :$STA $(git_getcurrentbranch)$OFF
$MNU s$OFF  Remote Repo/Branch      :$STA $remote_repo/$remote_branch$OFF
    Remote URL              :$STA$(show_remote_url "$remote_repo")$OFF
$MNU d$OFF  $indirstr directory         :$STA $indir$OFF has$STA $infilecount$OFF $patstr\0files
$MNU w$OFF  $outdirstr directory          :$STA $outdir$OFF
$MNU e$OFF  Diff Editor             :$STA $editor$OFF
$MNU f$OFF  Patch Validation fuzz   :$STA $(show_patchvalfuzz)$OFF
$MNU
    $UND\0Batch Run Parameters$OFF
$MNU 1$OFF  Compare mode            :$STA $(show_cmpmode)$OFF
$MNU 2$OFF  Patch apply mode        :$STA $(show_applymode)$OFF
$MNU 3$OFF  Patch apply fail mode   :$STA $(show_applyfailmode)$OFF
$MNU 4$OFF  Seek missing commits    :$STA $(show_patchseekmode)$OFF\
 $(show_nextpatch)$BLD
$MNU
    $UND\0Main Controls     $OFF
$MNU r$OFF  Run in batch mode
$MNU i$OFF  Init to defaults
$MNU h$OFF  help text
$MNU q$OFF  Quit this script
$MNU x$OFF  Toggle Extended Menu
$OFF
EOF
)
	local extmenu=$(
cat <<EOF
$MNU\
    $UND\0Discrete Operations$OFF
$MNU R$OFF  Rename mail files in    :$STA $indir$OFF
$MNU F$OFF  Format commits into     :$STA $outdir$OFF
$MNU S$OFF  Seek missing commits \
 $(show_apply_patches)$BLD
$MNU P$OFF  Compare Patches
$MNU G$OFF  Git reset to            :$STA $lasttag$OFF
$MNU B$OFF  Create a new branch at  :$STA $current_head_trunc$OFF
$MNU C$OFF  Clean the $STA$indirstr$OFF and/or $STA$outdirstr$OFF directories
$MNU N$OFF  Nuke the directories and reset head to most recent tag \
 $(show_view_logs)$BLD
$OFF
EOF
)
	echo -e "$settingstr"
	[ $menumode -eq $menumode_ext ]  && echo -e "$extmenu$OFF"
}

menu_parser() {
	get_filecount
	show_settings
	promptgetchar ""$MNU"Enter one of the above: "$OFF"" setting

	case $setting in

		s )	get_remote_seek
			;;
		b )	git_setbranch $branchlist
			git_get_lasttag lasttag $last_tag_file
			;;
		d )	prj_set_directory "$indirstr" $prj_indir indir quiet
			;;
		w )	prj_set_directory "$outdirstr" $prj_outdir outdir quiet
			;;
		e )	set_editor
			;;
		f )	set_patchvalfuzz
			;;
		x )	ui_cycle_state menumode $menumode_states
			prj_set_item $prj_menumode $menumode
			;;
		R )	renpatfiles
			;;
		F )	format_upstream_patches
			;;
		S )	seek_missing_commits
			;;
		A )	[ $applymode -ne $applymode_off ] && ! $b_allapplied \
				&& exec_apply_patches
			;;
		V )	view_logs
			;;
		1 )	ui_cycle_state cmpmode $cmpmode_states
			prj_set_item $prj_cmpmode $cmpmode
			;;
		2 )	ui_cycle_state applymode $applymode_states
			prj_set_item $prj_applymode $applymode
			;;
		3 )	ui_cycle_state applyfailmode $applyfailmode_states
			prj_set_item $prj_applyfailmode $applyfailmode
			;;
		4 )	ui_cycle_state patchseekmode $patchseek_states
			prj_set_item $prj_patchseekmode $patchseekmode
			;;
		5 )	$b_selpat && select_patch
			;;
		C )	clean_directories
			;;
		N )	nuke
			;;
		G )	reset_to_lasttag
			rm -f $usvbp_commits
			;;
		B )	create_branch
			;;
		P )	compare_patches
			;;
		i )	init_menu
			;;
		q )	exit_me 0
			;;
		r )	set_booleans
			return $rc_run
			;;
		h )	less $manual
			;;
	esac
	return $rc_continue
}

# init_files
#
# Initialize the global names of the directories and files to be used
# throughout the script.
#
# Globals:
# 	prj_indir
# 	prj_outdir
# 	indirstr
# 	outdirstr
# 	indir
# 	outdir
# 	bp_commits_name
# 	us_commits_name
# 	bp_commists
# 	us_commits
# 	usvbp_commits_name
# 	usvp_commits
# 	mismatch_file
#
init_files() {

	# get the patch and work directories.
	#
	check_dir $prj_indir "$indirstr" indir
	check_dir $prj_outdir "$outdirstr" outdir
	bp_commits="$outdir/$bp_commits_name"
	us_commits="$outdir/$us_commits_name"
	usvbp_commits="$outdir/$usvbp_commits_name"
	mmfile="$outdir/$mismatch_file"
}

init_loopvars() {
	editor=$(prj_get_item $prj_editor)
	cmpmode=$(prj_get_item $prj_cmpmode)
	applymode=$(prj_get_item $prj_applymode)
	applyfailmode=$(prj_get_item $prj_applyfailmode)
	patchseekmode=$(prj_get_item $prj_patchseekmode)
	patchvalfuzz=$(prj_get_item $prj_patchvalfuzz)
	menumode=$(prj_get_item $prj_menumode)
	remote_repo=$(prj_get_item $prj_remote_repo)
	remote_branch=$(prj_get_item $prj_remote_branch)
}

function menu_loop {

	get_booleans
	init_files
	init_loopvars

	# delete any "scratch" file from the indir
	#
	rm -f "$indir"/scratch

	local stat=0

	while true; do
		menu_parser
		stat=$?
		# echo "menu_parser_stat: $stat"
		[ $stat -eq $rc_run ] && break
	done
	return $stat
}

###########################################
# Parameter Initialization
###########################################
init_parms() {
	local offset=0
	local index=0
	local stat=0

	# This loop enumerates and counts the items in the project file.
	# Add new booleans to the end of the list.
	# Add new non-boolean parameters before the first boolean, but
	# after all the non-booleans.
	#
	for offset in \
	prj_menumode \
	prj_patchvalfuzz \
	prj_patchseekmode \
	prj_applyfailmode \
	prj_applymode \
	prj_cmpmode \
	prj_editor \
	prj_indir \
	prj_outdir \
	prj_background \
	prj_remote_repo \
	prj_remote_branch \
	prj_b_rename_infiles \
	prj_b_fmt_upstream
	do
		let index++
		let $offset=$index
		if [ "${offset:3:3}" == "_b_" ]; then
			let boolcount++
			if ! $b_found_first_bool; then
				boolindex=$index
				b_found_first_bool=true
			fi
		fi
	done

	prj_entries=$index
	[ -d "$MYDATA" ] || mkdir $MYDATA
	prj_init_prjfile $MYDATA/patchreview.prj $index
	stat=$?

	# If the above call to prj_init_prjfile returns nonzero, it means that a
	# new project file has been created and its values must be initialized.
	#
	if [ $stat -ne 0 ]; then
		ui_use_colors
		local newprjstr=$(
cat <<EOF
$INF
The project file has changed, or a new one has been created.

We will need to know:
1. The $STA$indirstr$INF directory to contain the patches for review
2. The $STA$outdirstr$INF directory to contain output from this script
3. Your choice of$STA diff editor
$OFF
EOF
)
		echo -e "$newprjstr"
		prj_set_directory "$indirstr" $prj_indir indir quiet
		echo
		prj_set_item $prj_outdir "$indir/tmp"
		prj_set_directory "$outdirstr" $prj_outdir outdir quiet
		echo
		set_editor
		cmpmode=$cmpmode_batch
		applymode=$applymode_norm
		applyfailmode=$applyfailmode_exit
		patchseekmode=$patchseek_off
		patchvalfuzz=3
		menumode=$menumode_ext
		# remote_repo="origin"
		# remote_branch="master"
		prj_set_item $prj_menumode $menumode
		prj_set_item $prj_cmpmode $cmpmode
		prj_set_item $prj_applymode $applymode
		prj_set_item $prj_applyfailmode $applyfailmode
		prj_set_item $prj_patchseekmode $patchseekmode
		prj_set_item $prj_patchvalfuzz $patchvalfuzz
		prj_set_item $prj_background $terminal_background # lib/ui.source
		prj_set_item $prj_remote_repo $remote_repo
		prj_set_item $prj_remote_branch $remote_branch
	fi

	b_color=true

	if $b_color; then
		terminal_background=$(prj_get_item $prj_background)
		(( $terminal_background > 0 && $terminal_background < 3 )) || ui_get_screenbackground
		ui_set_colors
	fi

	init_booleans
	init_files
	init_loopvars
	get_booleans
	git_get_lasttag lasttag $last_tag_file
}

main_loop() {

	local stat

	# Print the Herald
	#
	echo -e "$MNU"
	echo -e " "$UND"Patch Review $STA$version$MNU Review patches and compare to upstream$OFF"

	##############################################
	# Main Program Loop
	##############################################

	while true; do
		menu_loop
		menu_stat=$?
		# echo "menu_loop_stat: $menu_stat"

		if $b_rename_infiles; then
			exec_boolean b_rename_infiles false "renpatfiles"
			[ $? -ne 0 ] && continue
		fi

		$b_fmt_upstream && format_upstream_patches

		if [ $patchseekmode -eq $patchseek_on ]; then
			[ -f "$us_commits" ] || format_upstream_patches
			[ -f "$us_commits" ] &&	check_fixes "$us_commits" \
				"$remote_repo/$remote_branch"
		fi

		if [ $applymode -ne $applymode_off ]; then
			exec_apply_patches
			[ $? -ne 0 ] && continue
		fi

		[ $cmpmode -ne $cmpmode_off ] && compare_patches
	done
}

cmd_check_fixes() {
	local stat=0

	get_filecount
	$b_rename_infiles exec_boolean b_rename_infiles false "renpatfiles"

	[ -f "$us_commits" ] || format_upstream_patches
	[ -f "$us_commits" ] &&	check_fixes "$us_commits" \
		"$remote_repo/$remote_branch"

	return 0
}

# parse_cmdline - command line interface
#
parse_cmdline() {
	local argc=$#

	init_files
	init_loopvars

	while (( $# > 0 )) ;do
		key="$1"
		case $key in
			"-S" ) 	cmd_check_fixes
				shift
				;;
			"-R" )	renpatfiles
				shift
				;;
			   * ) 	echo "argc=$argc argv: $@"
				;;
		esac
	done

}

#############################
# main() entry point
#############################
main() {
	local argc=$#

	# Trap for control-c
	#
	trap control_c SIGINT

	! $(git_checkrepo) && git_invrepomsg && exit 1

	init_parms

	if [ $argc -eq 0 ]; then
		main_loop
	else
		parse_cmdline $@
	fi

	exit 0
}

# Call main.
# Exit when done.
#
main $@
exit_me 0
