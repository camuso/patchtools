#!/bin/bash
#
# patcmp v1.0	- compare patches

source ~/bin/lib/ui.source

function usage () {
	echo
	echo "usage: patcmp <dir-1> <dir-2>"
	echo
	echo -e "\tCall vimdiff to compare the files in the two directories."
	echo -e "\tThe two directories must have the same number of files."
	echo -e "\tThe files considered for comparison must have ".patch""
	echo -e "\tat the end of their filename."
	echo
	exit 1
}

[ $# -ne 2 ] && usage

usdir=$1
mldir=$2

uscount=$(ls $usdir/*.patch | wc -l)
mlcount=$(ls $mldir/*.patch | wc -l)

# It is not really required that the two directories have the same number
# of files, because we will simply stop processing when we run out of files
# in one directory or the other. However, it could lead to confusion, since
# we are comparing a patch set. Both directories containing the patch set
# should therefore have the same number of files.
#
if ((mlcount != uscount)); then
	echo
	echo "The two directories must have the same number of files."
	echo -e "\t$usdir has $uscount entries."
	echo -e "\t$mldir has $mlcount entries."
	echo "Exiting ..."
	echo
	exit 1
fi

echo
echo "Patches in $usdir will be compared with patches in $mldir"
echo


index=0
for i in $(ls "$mldir"/*.patch); do
	mlfiles[index]="$i"
	echo "${mlfiles[$index]}"
	let index++
done
echo

index=0
for i in $(ls "$usdir"/*.patch); do
	echo "-----------------------------------------------------------------"
	echo "Comparing: ${mlfiles[$index]}"
	grep "Subject: " "${mlfiles[$index]}"
	echo
	echo "With     : $i"
	grep "Subject: " "$i"
	read -n1 -p "Press \"q\" to quit, \"s\" to skip, any other key to continue ..." answer
	echo
	if [ "$answer" == "q" ] || [ "$answer" == "s" ]; then echo; let index++; fi
	[ "$answer" == "q" ] && break
	[ "$answer" == "s" ] && continue
	vimdiff "${mlfiles[$index]}" "$i"
	let index++
	echo
done
echo
exit 0
