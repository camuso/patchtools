#!/bin/bash
#
# patcmp v1.0	- compare patches

source ~/bin/lib/ui.source

declare code_ok=0
declare code_special_action=1
declare code_special_exit=2
declare code_parmcount_err=126
declare code_filecount_neq=127

declare mldir=$1
declare usdir=$2
declare spclstr=$3
declare argc=$#

declare uscount=$(ls "$usdir"/*.patch | wc -l)
declare mlcount=$(ls "$mldir"/*.patch | wc -l)

declare index=0
declare maxindex=$((mlcount - 1))
declare penindex=$((maxindex - 1))
declare preindex=0

declare b_runmismatch=false
declare mismatch_file
declare -i first_mismatch
declare -i last_mismatch
declare -i mmindex
declare -i mismatch_count
declare -a mismatch_array

usage() {
	echo
	echo "usage: patcmp dir-1 dir-2 [special action string]"
	echo
	echo -e "\tCall vimdiff to compare the files in the two directories."
	echo -e "\tThe two directories must have the same number of files."
	echo -e "\tThe files considered for comparison must have \".patch\""
	echo -e "\tat the end of their filename."
	echo -e "\tThe \"special action string\" is an optional string displayed"
	echo -e "\twhen the caller has a special action to perform for the"
	echo -e "\t\"z\" menu item."
	echo -e "\texit codes:"
	echo -e "\t\t  0 - normal exit"
	echo -e "\t\t  1 - user pressed the \"z\" option in the menu"
	echo -e "\t\t126 - wrong number of parameters"
	echo -e "\t\t127 - directories don't contain same number of files"
	echo
	exit $code_parmcount_err
}

[ $argc -lt 2 ] && usage


# It is not really required that the two directories have the same number
# of files, because we will simply stop processing when we run out of files
# in one directory or the other. However, it could lead to confusion, since
# we are comparing a patch set. Both directories containing the patch set
# must therefore have the same number of patch files.
#
if ((mlcount != uscount)); then
	echo
	echo "The two directories must have the same number of files."
	echo -e "\t$usdir has $uscount entries.\n"
	echo -e "\t$mldir has $mlcount entries.\n"
	echo "Exiting ..."
	echo
	exit $code_filecount_neq
fi

echo
echo "Patches in $mldir will be compared with patches in $usdir"
echo

# for i in $(ls "$mldir"/*.patch); do
for i in $(ls "$mldir"/*.patch  | sort -V); do
	mlfiles[index]="$i"
	echo "${mlfiles[$index]}"
	let index++
done
echo

index=0
#for i in $(ls "$usdir"/*.patch); do
for i in $(ls "$usdir"/*.patch  | sort -V); do
	usfiles[index]="$i"
	echo "${usfiles[$index]}"
	let index++
done
echo

# PS4='+(${BASH_SOURCE}:${LINENO}): '
# set -x

getpatchnumber() {
	index=-1
	while true; do
		getuser "Patch number: " index
		if [ $index -lt 0 ] && [ $index -ge $mlcount ]; then
			echo -e "$attr_bold"
			printf "Patch number %04d is not in this set" $index
			echo -e "$attr_OFF"
			continue
		else
			index=$((index - 1 ))
			break
		fi
	done
}

# replace_commit
#
# $1 - one-based number of the patch in the patchset
#
replace_commit() {
	local patnum
	local commit
	local patcnt
	local commitslog="$usdir/us-commits.log"
	local pfx
	local stat
	local idx=$index

	if (($index <= 0)); then
		index=0
	elif ((1 <= $index && $index <= $penindex)); then
		let index--
	elif (($index >= $maxindex)); then
		index=$maxindex
	fi

	patnum=$((index + 1 ))
	pfx=$(printf "%04d" $patnum)

	if ! [ -f "$commitslog" ]; then
		ui_getfilespec "Path/File containing the commits: " commitslog
	fi
	patcnt=$(cat $commitslog | wc -l)

	rm -vf ${usfiles[$index]}
	getuser "New commit ID: " commit
	ui_replaceline $patnum "$commit $patnum/$patcnt" "$commitslog"
	git format-patch -1 -k --start-number $patnum $commit -o $usdir
	stat=$?
	echo $stat

	# If we could not format the patch, then create an empty
	# patch with the bad commit id in it.
	#
	[ $stat -ne 0 ] && echo -e "\ninvalid commit: $commit\n" > $usdir/$pfx-inv.patch

	usfiles[$index]=$(ls $usdir/$pfx-*.patch)

}

# backup - set index to value for previous diff'd files
#
# Globals:
# 	index
# 	maxindex
# 	preindex
# 	penindex
#
backup() {
	local idx

	$b_runmismatch && idx=$mmindex || idx=$index
	let idx--

	if (($idx <= 0)); then
		idx=0
	elif (( ( (1 <= $index) && ($index <= $penindex) )
	     || ($preindex == $penindex) )); then
		let idx--
	fi

	$b_runmismatch && mmindex=$idx || index=$idx
}

# init_mismatch()
#
# initializes the following globals
# 	b_runmismatch
# 	mismatch_file
# 	mismatch_count
# 	first_mismatch
# 	last_mismatch
# 	mmindex
#
init_mismatch() {
	local line
	local verbosity
	local swqno

	mmindex=0
	b_runmismatch=true
	mismatch_file=$usdir/mm.log
	mismatch_count=$(($(cat $mismatch_file | wc -l) -1))

	# Determine the verbose level of the mismatch_file
	#
	line=$(readlinen 1 $mismatch_file)
	verbosity=$(echo $line | cut -d':' -f2)

	# create the array of mismatched patched file indexes. The index is
	# 0-based, while the patch sequence number is 1-basd, so subtract 1
	# from each sequence number to get the index into the mlfiles and
	# usfiles arrays.
	#
	while read line; do
		[ "${line:0:6}" == "PATCH:" ] || continue
		(($verbosity > 0)) && { [[ "$line" == *"!="* ]] || continue; }

		# No quotes around $line in the following, because we want
		# to strip leading spaces. We are extracting integers, not
		# strings.
		#
		seqno=$(echo $line | cut -d':' -f2)
		mismatch_array[$mmindex]=$((seqno - 1))

		echo ${mismatch_array[$mmindex]}
		let mmindex++
	done < $mismatch_file

	last_mismatch=${mismatch_array[$(($mmindex - 1))]}
	first_mismatch=${mismatch_array[0]}
}

# inarray()
#
# Looks for an integer in an integer array
# Echoes and returns 0 if found, 1  if not.
#
# $1 value
# $2 array
#
# Example:
# 	[ $(inarray 12 $array) -eq 0 ] && echo "found" || echo "not found"
#
# returns 0 if found, nonzero if not found
#
inarray() {
	local i
	for i in ${@:2}; do
		[ $i -eq $1 ] && echo 0 && return 0
	done

	echo 1
	return 1
}

#############################################
# Main program loop
############################################

[ -f $usdir/mm.log ] && init_mismatch

mmindex=0
$b_runmismatch && index=${mismatch_array[$mmindex]} || index=0
echo "starting index: $index"

while true; do

	if [[ $index -ge $maxindex ]]; then
		echo -e "$attr_bold"
		printf "Patch %04d is the last patch in the set." $((maxindex + 1))
		echo -e "$att_OFF"
	fi

	$b_runmismatch && [ $(ui_inarray $index $mismatch_array) -eq 0 ] \
		&& index=mmindex

	echo "-----------------------------------------------------------------"
	echo "Comparing: ${mlfiles[$index]}"
	grep "Subject: " "${mlfiles[$index]}"
	echo
	echo "With     : ${usfiles[$index]}"
	grep -m1 "Subject: " "${usfiles[$index]}"
	echo
	if [[ $index -lt 0 ]] || [[ $index -gt $maxindex ]]; then
		echo -e ""$attr_bold"There is no patch number: $((index + 1))."$att_OFF""
		index=0
	fi
	echo -en "$attr_bold"
	[ -e $mismatch_file ] && { \
	echo -e  "\tm - only examine mismatched patch files: $b_runmismatch"; \
	echo -e  "\tc - run batch file comparison"; }
	echo -e  "\tf - forward one patch"
	echo -e  "\tb - back one patch"
	echo -e  "\tn - prompt for a number for a specific patch"
	echo -e	 "\tp - replace current upstream patch with a different commit"
	echo -e  "\tx - exit to a shell"
	echo -e  "\td - done comparing patches"
	echo -e  "\tq - quit execution"
	[ $argc -eq 3 ] && echo -e  "\tz - "$spclstr""
	echo -en "\tor any other key to continue ..."$attr_OFF""
	read -n1 answer
	echo

	case $answer in
		d )	break
			;;
		q )	echo
			exit $code_special_exit
			;;
		f )	echo
			[[ $index -lt $maxindex ]] && index=$((index + 1)) || index=maxindex
			;;
		b )	echo
			backup
			;;
		n )	getpatchnumber
			;;
		p )	replace_commit
			;;
		x )	ui_sh_spawn
			continue
			;;
		z )	[ $argc -eq 3 ] && exit $code_special_action || continue
			;;
		m )	ui_toggle b_runmismatch
			$b_runmismatch && \
				{ mmindex=0; index=${mismatch_array[0]}; } \
				|| index=0
			continue
			;;
		c )	patbatcmpmgr -R $mldir -U $usdir -o $usdir/mm.log
			continue
			;;
	esac

	vimdiff "${mlfiles[$index]}" "${usfiles[$index]}"
	preindex=$index

	if $b_runmismatch; then
		[[ $index -lt $last_mismatch ]] && let mmindex++
		for ((i = 0; i < last_mismatch; ++i)); do echo ${mismatch_array[$i]}; done
		index=${mismatch_array[$mmindex]}
		echo "mmindex: $mmindex index: $index"
	else
		[[ $index -lt $maxindex ]] && let index++
	fi

	echo
done
echo
exit $code_ok
