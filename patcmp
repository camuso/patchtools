#!/bin/bash
#
# patcmp v1.0	- compare patches

declare MYDIR=$(dirname $(which $(basename $0)))
declare MYLIB=$MYDIR/lib
source $MYLIB/ui.source

declare -i code_ok=0
declare -i code_special_action=1
declare -i code_special_exit=2
declare -i code_parmcount_err=101
declare -i code_filecount_neq=102

declare mldir		# dir with patches downloaded from email
declare usdir		# dir with upstream patches created from commits
             		# : from the files in mldir
declare -a usfiles	# array of the upstream patch file names

declare editor
declare zstr=
declare b_zstr=false

declare -i mlcount	# count of patch files downloaded from mail
declare -i uscount	# count of patch files in upstream directory
declare -i index=0	# running 0-based index of the current patch
declare -i maxindex	# highest attainable index (mlcount - 1)

declare b_runmismatch=false
declare b_nomismatch=true
declare mismatch_file
declare -i first_mismatch
declare -i current_mismatch
declare -i mmindex
declare -i currentmm
declare -i mismatch_count
declare -a mismatch_array
declare mismatch_numbers=""

declare lasttag=
declare b_rmlasttag=false
declare b_backup=false

declare -i optcount=0

declare -i notify_disable_mismatch=1
declare -i notify_no_change=2

declare usagestr=$(
cat <<EOF

$(basename $0) [options] dir-1 dir-2 commits-file

  Call a diff editor to compare the patch files in the two directories.
  The directories must have the same number of ".patch" files.

  -z zstr    - A special action string displayed for the 'z' menu
               item, which only appears when this option is nonzero.

  -m mm_file - An optional mismatch file passed by the caller that
               contains a list of files generated by the patbatcmp
               script.

  -h         - This help text.

  Exit codes:
    0 - normal exit
    1 - wrong number of args
    2 - directories do not contain the same number of patch files
  130 - user typed control-c
        see http://www.tldp.org/LDP/abs/html/exitcodes.html
\0
EOF
)

usage() {
	echo -e "$usagestr"
	exit $1
}

exit_patcmp() {
	[ -e /dev/shm/lasttag ] && rm -f /dev/shm/lasttag
	exit $1
}

# run if user hits control-c
#
control_c()
{
	echo -en "\nCtrl-c detected\nCleaning up and exiting.\n"
	exit_patcmp $CTLC_EXIT
}

# backup
#
# Will run the selected editor's diff on the patch pair previous to the
# one that's about to be examined. Sequential calls to this routine will
# backup to the patch prvious to the one just examined.
#
# $1 - current index
# $2 - flag indicates the last patch pair was viewed by calling backup
# $3 - returns the correct back_one index
#
backup() {
	local curidx=$1
	local back=$2
	local idx=$curidx

	let idx--

	$back && let idx--

	(($idx <= 0)) && idx=0

	eval $3=$idx
}

# backup_wrapper - wraps the backup routine with globals
#
# Just want to keep the global crap isolated from the backup routine
#
# globals
#	b_backup - set when the previous patch pair was examined after
#	           a call to backup.
#	index	-  the current index
#	mmindex -  the current mismatch index, if we are in mismatch mode
#
backup_wrapper() {
	echo "backup_wrapper: index: $index patnum: $patnum"

	if $b_runmismatch; then
		backup $mmindex $b_backup mmindex
		index=${mismatch_array[$mmindex]}
	else
		backup $index $b_backup index
	fi
}

# get_patch_number
#
# globals:
# 	index
#	mmindex
#	b_runmismatch
#
get_patch_number() {
	local retval
	local patnum
	local stat
	local saved_mmindex=$mmindex
	local saved_index=$index
	local b_limitvio=false
	local minstr="$OFF < 1, setting patch number to$BLD 1$OFF\n"
	local maxstr="$OFF > $mlcount, setting patch number to $BLD$mlcount$OFF\n"

	echo -e "$BLD""Type 'q' to quit and pick up where you left off $OFF"

	while :; do
		getuser "Patch number: " patnum
		[ "$patnum" == "q" ] && break

		if ! [[ $patnum =~ ^-?[0-9]+$ ]]; then
			echo -e "$patnum ${BLD}is not a valid number.$OFF"
			continue
		fi

		if [ $patnum -lt 1 ]; then
			echo -e "\n$BLD$patnum$minstr"
			patnum=1
		fi

		if [ $patnum -gt $mlcount ]; then
			echo -e "\n$BLD$patnum$maxstr"
			patnum=$mlcount
		fi

		index=$((patnum - 1))
		echo "index: $index patnum: $patnum"
		break
	done
}

# replace_commit
#
# globals
#	b_backup  - set when the previous patch pair was examined after
#	            a call to backup.
#	index	  - the current index
#	uscommits - passed as parameter 4 from caller
#
replace_commit() {
	local patnum
	local commit
	local patcnt
	local pfx
	local stat

	b_backup=false

	patnum=$((index + 1))
	echo "index: $index patnum: $patnum"

	([ $index -gt 1 ] && [ $patnum -lt $mlcount ]) &&  backup_wrapper

	pfx=$(printf "%04d" $patnum)

	[ -f "$uscommits" ] || \
		ui_getfilespec "File containing the upstream commits: " uscommits

	patcnt=$(cat $uscommits | wc -l)
	echo "removing: index: $index patch: ${usfiles[$index]}"
	rm -vf ${usfiles[$index]}
	getuser "New commit ID: " commit
	echo "replacing patch: $patnum with commit: $commit"
	ui_replaceline $patnum "$commit $patnum/$patcnt" "$uscommits"
	git format-patch -n1 -k --start-number $patnum $commit -o $usdir
	stat=$?
	echo $stat

	# If we could not format the patch, then create an empty
	# patch with the bad commit id in it.
	#
	[ $stat -ne 0 ] && echo -e "\ninvalid commit: $commit\n" > $usdir/$pfx-inv.patch

	usfiles[$index]=$(ls $usdir/$pfx-*.patch)
}

say_nomismatch() {

	echo
	echo -e "********************************************* $BLD"
	echo -e "      There are no incongruent patches"
	echo -e "   Only congruent patches can be examined   $OFF"
	echo -e "*********************************************"
	echo

}


# init_mismatch()
#
# initializes the following globals
# 	mismatch_count
# 	first_mismatch
# 	last_mismatch
# 	mmindex
#	index
#
init_mismatch() {
	local line	# loop var gets each line in the mismatch_file
	local verbosity	# level of verbosity in the mismatch_file
	local seqno	# sequence number of patch

	mmindex=0

	# Determine the verbose level of the mismatch_file
	#
	line=$(ui_readline 1 $mismatch_file)
	verbosity=$(echo $line | cut -d':' -f2)

	# echo "Incongruent patches"

	# create the array of mismatched patched file indexes. The index is
	# 0-based, while the patch sequence number is 1-basd, so subtract 1
	# from each sequence number to get the index into the mlfiles and
	# usfiles arrays.
	#
	while read line; do
		[ "${line:0:6}" == "PATCH:" ] || continue
		(($verbosity > 0)) && { [[ "$line" == *"!="* ]] || continue; }

		# No quotes around $line in the following, because we want
		# to strip leading spaces. We are extracting integers, not
		# strings.
		#
		seqno=$(echo $line | cut -d':' -f2)
		mismatch_array[$mmindex]=$((seqno - 1))

		echo $seqno
		mismatch_numbers=$(echo "$mismatch_numbers"; echo $seqno)
		let mmindex++
	done < $mismatch_file

	mismatch_count=$mmindex

	if [ $mismatch_count -gt 0 ]; then
		last_mismatch=${mismatch_array[$((mmindex-1))]}
		first_mismatch=${mismatch_array[0]}
		index=$first_mismatch
		# echo "mismatch_count; $mismatch_count max mmindex: $((mmindex-1))"
		b_nomismatch=false
		b_runmismatch=true
	else
		b_nomismatch=true
		b_runmismatch=false
		mismatch_numbers=""
		say_nomismatch
	fi
	mmindex=0
}

getlasttag() {

	echo -n "Getting last git tag.."
	git describe --tags --abbrev=0 > /dev/shm/lasttag &

	while true; do
		echo -n "."
		[ -f /dev/shm/lasttag ] && break
		sleep 1
	done

	echo
	b_rmlasttag=true
}

vim_cmd() {
	vimdiff "$1" "$2"
}

emacs_cmd() {
	emacs --eval "(ediff-files \"$1\" \"$2\")" -geometry 160x40
}

tkdiff_cmd() {
	tkdiff "$1" "$2"
}

#############################################
# Initialization
############################################

# Trap for control-c
#
trap control_c SIGINT

# Herald
#
echo -e "\n$BLD\0patcmp 3.0 - Interactively compare pairs of patches"
echo -e "\tType '$OFF\0h$BLD' for help\n"

while getopts z:m:h OPTION; do
    case "$OPTION" in

	z ) zstr="$OPTARG"
	    b_zstr=true
	    optcount=$((optcount+2))
	    ;;
	m ) mismatch_file="$OPTARG"
	    b_runmismatch=true
	    optcount=$((optcount+2))
	    ;;
	h ) usage
	    ;;
	* ) echo "unrecognized option"
	    echo -e "$usagestr"
	    exit 127
    esac
done

# Shift past the options and see if we still have the right number of
# arguments.
#
shift $optcount
[ $# -eq 4 ] || usage $code_parmcount_err

# Get the input arguments
#
mldir=$1
usdir=$2
editor=$3
uscommits=$4
uscount=$(ls -1 "$usdir"/*.patch | wc -l)
mlcount=$(ls -1 "$mldir"/*.patch | wc -l)
maxindex=$((mlcount - 1))

# It is not really required that the two directories have the same number
# of files, because we will simply stop processing when we run out of files
# in one directory or the other. However, it could lead to confusion, since
# we are comparing a patch set. Both directories containing the patch set
# must therefore have the same number of patch files.
#
if ((mlcount != uscount)); then
	echo
	echo "The two directories must have the same number of files."
	echo -e "\t$usdir has $uscount entries.\n"
	echo -e "\t$mldir has $mlcount entries.\n"
	echo "Exiting ..."
	echo
	exit $code_filecount_neq
fi

case "$editor" in
    "vimdiff" )	editcmd=vim_cmd
		;;
    "emacs"   )	editcmd=emacs_cmd
		;;
    "tkdiff"  )	editcmd=tkdiff_cmd
		;;
    *         )	echo "$editor"" is not a supported editor."
		exit_patcmp 1
		;;
esac

echo
echo -e "$BLD\0Patches in$OFF $mldir$BLD will be compared with patches in$OFF $usdir"
echo -e "$BLD\0Editor of choice is$OFF $editor"

index=0
for i in $(ls "$mldir"/*.patch  | sort -V); do
	mlfiles[index]="$i"
	echo "${mlfiles[$index]}"
	let index++
done
echo

index=0
for i in $(ls "$usdir"/*.patch  | sort -V); do
	usfiles[index]="$i"
	echo "${usfiles[$index]}"
	let index++
done
echo

# PS4='+(${BASH_SOURCE}:${LINENO}): '
# set -x

[ -f "$mismatch_file" ] && init_mismatch
$b_runmismatch || index=0
# echo "Starting with patch: $((index + 1))"

# If the lasttag file does not exist, then go create it with a
# call to getlasttag().
#
[ -f /dev/shm/lasttag ] && b_rmlasttag=true || getlasttag
lasttag=$(cat /dev/shm/lasttag)

#############################################
# Main program Loop
############################################

while :; do

	if [ $index -lt 0 ] || [ $index -gt $maxindex ]; then
		echo -e "There is no patch number:$BLD $((index + 1))$OFF."
		if $b_runmismatch; then
			mmindex=0
			index=${mismatch_array[$mmindex]}
		else
			index=0
		fi
		echo -e "Starting with patch number:$BLD $((index + 1))$OFF\n"
	fi

	if [ $index -ge $maxindex ]; then
		echo -e "     ******"
		printf "Patch$BLD %04d$OFF is the last patch in the set.\n" \
			$((maxindex + 1))
		echo -e "     ******\n"
	fi

	if $b_runmismatch && [ $index -eq $last_mismatch ]; then
		echo -e "     ******"
		printf "Patch$BLD %04d$OFF is the last mismatch in the set.\n" \
			$((last_mismatch + 1))
		echo -e "     ******\n"
	fi

	if ($b_runmismatch && [ $index -gt 0 ] && [ $index -lt $maxindex ]); then
		ui_inarray $index mismatch_array[@]
		[ $? -eq 0 ] && index=${mismatch_array[$mmindex]} \
			     || index=${mismatch_array[0]}
	fi

	echo -e "\n$BLD\0Interactively Compare Patch Pairs"
	echo -e "-----------------------------------------------------------------"
	echo -en "$OFF"
	echo -e "$BLD\0Compare :$OFF $(basename ${mlfiles[$index]})"
	echo -e "   $BLD\0With :$OFF $(basename ${usfiles[$index]})"
	echo

	echo -en "$BLD"
	echo -e  "\t    Last Tag :$OFF $lasttag$BLD"
	echo -e  "\t    RHEL dir :$OFF $mldir$BLD"
	echo -e  "\tUpstream dir :$OFF $usdir$BLD"
	echo -e "-----------------------------------------------------------------"
	echo -e  "\tc - run batch file comparison to find mismatched patch pairs"

	if ! $b_nomismatch; then
	echo -e  "\tm - only examine mismatched patch pairs:$OFF $b_runmismatch$BLD"
	echo -e  "\ts - show contents of mismatch log"
	fi

	echo -e  "\tb - back to the previous patch"
	echo -e  "\tn - prompt for a number for a specific patch"
	echo -e	 "\tp - replace current upstream patch with a different commit"
	echo -e  "\tx - spawns a secondary shell"
	echo -e  "\tq - quit and return to previous execution environment"
	$b_zstr && echo -e  "\tz - "$zstr""
	echo -en "\tor any other key moves forward to the next patch ... "$OFF""
	read -n1 answer
	echo

	case $answer in
		q )	rm -f $mismatch_file
			break
			;;
		b )	echo
			backup_wrapper
			b_backup=true
			;;
		n )	get_patch_number
			;;
		p )	replace_commit
			;;
		x )	ui_sh_spawn
			echo
			continue
			;;
		z )	$b_zstr && exit $code_special_action
			;;

		m )	# Unless a mismatch file exists, this option is meaningless.
			#
			if ! $b_nomismatch; then
				ui_toggle b_runmismatch
				if $b_runmismatch; then
					mmindex=0
					index=${mismatch_array[0]}
				fi
				echo
				continue
			fi
			;;

		s )	# Only works when there is a mismatch file
			#
			if ! $b_nomismatch; then
				less $mismatch_file
				echo
				read -n1 -p "Press any key to continue... "
				echo
				continue;
			fi
			;;

		c )	patbatcmpmgr -R $mldir -U $usdir -o $usdir/mm.log
			mismatch_file=$usdir/mm.log
			b_runmismatch=true
			init_mismatch
			echo
			continue
			;;

		* )	b_backup=false
			;;
	esac

	$editcmd "${mlfiles[$index]}" "${usfiles[$index]}"

	if $b_runmismatch; then
		# echo "mismatch_array: ${mismatch_array[@]}"
		# echo "Current mmindex: $mmindex index: $index last mm: $last_mismatch"

		# If the user selected a patch number whose index is not in the
		# mismatch_array, then realign the index to the most recent
		# patch number used from within the array.
		#
		ui_inarray $index mismatch_array[@] mmindex
		[ $? -eq 0 ] || mmindex=$current_mismatch

		echo "mmindex: $mmindex"
		[ $index -lt $last_mismatch ] && let mmindex++
		index=${mismatch_array[$mmindex]}
		current_mismatch=$mmindex
		# echo "Forward mmindex: $mmindex index: $index"
	else
		[ $index -lt $maxindex ] && let index++
		# echo "Forward index: $index maxindex: $maxindex"
	fi

	echo
done
echo
exit $code_ok
