#!/bin/bash
#
# patcmp v1.0	- compare patches

source ~/bin/lib/ui.source

function usage () {
	echo
	echo "usage: patcmp <dir-1> <dir-2>"
	echo
	echo -e "\tCall vimdiff to compare the files in the two directories."
	echo -e "\tThe two directories must have the same number of files."
	echo -e "\tThe files considered for comparison must have ".patch""
	echo -e "\tat the end of their filename."
	echo
	exit 1
}

[ $# -ne 2 ] && usage

usdir=$1
mldir=$2

uscount=$(ls $usdir/*.patch | wc -l)
mlcount=$(ls $mldir/*.patch | wc -l)

# It is not really required that the two directories have the same number
# of files, because we will simply stop processing when we run out of files
# in one directory or the other. However, it could lead to confusion, since
# we are comparing a patch set. Both directories containing the patch set
# should therefore have the same number of files.
#
if ((mlcount != uscount)); then
	echo
	echo "The two directories must have the same number of files."
	echo -e "\t$usdir has $uscount entries.\n"
	echo -e "\t$mldir has $mlcount entries.\n"
	echo "Exiting ..."
	echo
	exit 1
fi

echo
echo "Patches in $usdir will be compared with patches in $mldir"
echo


index=0
for i in $(ls "$mldir"/*.patch); do
	mlfiles[index]="$i"
	echo "${mlfiles[$index]}"
	let index++
done
echo

index=0
for i in $(ls "$usdir"/*.patch); do
	usfiles[index]="$i"
	echo "${usfiles[$index]}"
	let index++
done
echo

getpatchnumber() {
	index=-1
	while true; do
		getuser "Patch number: " index
		if [ $index -lt 0 ] && [ $index -ge $mlcount ]; then
			echo -e "$attr_bold"
			printf "Patch number %04d is not in this set" $index
			echo -e "$attr_OFF"
			continue
		else
			index=$((index - 1 ))
			break
		fi
	done
}

index=0
while true; do
	echo "-----------------------------------------------------------------"
	echo "Comparing: ${mlfiles[$index]}"
	grep "Subject: " "${mlfiles[$index]}"
	echo
	echo "With     : ${usfiles[$index]}"
	grep -m1 "Subject: " "${usfiles[$index]}"
	echo
	if [ $index -eq $mlcount ]; then
		echo -e "$attr_bold"
		printf "Patch %04d is the last patch in the set." $((index))
		echo -e "$att_OFF"
		index=$((mlcount - 1))
	fi
	if [ $index -lt 0 ] || [ $index -gt $mlcount ]; then
		echo -e ""$attr_bold"There is no patch number: $((index + 1))."$att_OFF""
		index=0
	fi
	echo -e "$attr_bold"
	echo "Press \"q\" to quit comparing patches, \"s\" to skip forward, \"b\" to skip back,"
	echo "\"n\" to enter a number for a spgecific patch,"
	echo -en "or any other key to continue ..."$attr_OFF""
	read -n1 answer
	echo

	case $answer in
		"q" )	echo
			break
			;;

		"s" )	echo
			[ $index -lt $mlcount ] && index=$((index + 1))
			continue
			;;

		"b" )	echo
			[ $index -gt 0 ] && index=$((index - 1))
			continue
			;;

		"n" )	getpatchnumber
			continue
			;;
	esac

	vimdiff "${mlfiles[$index]}" "${usfiles[$index]}"
	let index++
	echo
done
echo
exit 0
