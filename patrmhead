#!/bin/bash
#
# patrmhead
#

# Use unset in case these have been set elsewhere.
unset BLD && declare BLD="[1m"
unset UND && declare UND="[4m"
unset OFF && declare OFF="[0m"

declare -i tcols=$(tput cols)   # number of columns in the terminal
declare CL1="\e["$tcols"D"	# column 1 of the current line
declare CCR="\e[K"    		# clear line and carriage return
declare UP1="\e[1A"		# move cursor up one line

# Contlol-C exit code
# see http://www.tldp.org/LDP/abs/html/exitcodes.html
unset CTLC_EXIT &&  declare -i CTLC_EXIT=130

# Other exit codes
declare -i EXIT_OK=0
declare -i EXIT_INVARG=1
declare -i EXIT_INVFIL=2
declare -i EXIT_INVDIR=3

declare -a exitmsgary=(
""
"Invalid number of arguments."
" is an invalid filename."
" is an invalid directory name."
)

exitme() {
	local exitval=$1
	local strarg=""
	local exitmsg

	if ([ $exitval -ne $EXIT_OK ] && [ $exitval -ne $CTLC_EXIT ]); then
		[ $# -eq 2 ] && strarg=$2
		[ ${#exitmsgary[@]} -gt $exitval ] \
			&& exitmsg="${exitmsgary[$exitval]}"

		echo -e "$BLD$strarg$exitmsg$OFF"

		[ $exitval -ne 0 ] && echo -e \
			"Type$BLD patrmhead -h$OFF for help."
	fi

	exit $exitval
}

# run if user hits control-c
#
control_c()
{
	echo -en "
Ctrl-c detected
Cleaning up and exiting.
"
	exitme $CTLC_EXIT
}


declare -i optcount=0

declare usagestr=$(
cat <<EOF

$(basename $0) [options] directory

Removes archive list header and footer from patch files

Arguments:
  directory - directory containing the patch files

Options:
  -h  - this help
\0
EOF
)

usage() {
	echo -en "$usagestr"
	exitme 0
}

# strtok - tokenizes a string and returns an array
#
# $1 - the string to tokenize
# $2 - the string of delimiters
# $3 - returns the tokenized string as an array
#
# examples:
#
# ui_strtok kernel-pegas-4.11.0-2.el7.x86_64 ".-" array
#
# ${array[@]} will contain all the tokens separated by delimiters "."
# and "-", and the delimiters will be replaced by spaces.
#
strtok() {
	IFS="$2" read -r -a $3 <<< "$1"
}

fixup_addr ()
{
    local line="$1"
    local b_front=false
    local b_mid=false
    local retlin=

    for word in $line
    do
        [ ${word:0:1} == "<" ] && b_front=true

	if $b_front; then
            retlin="$retlin $word@"
	    b_front=false
            b_mid=true;
            continue;
        elif $b_mid; then
            if [ ${word: -1} == ">" ]; then
                b_mid=false
                retlin="$retlin$word"
            else
                retlin="$retlin$word."
            fi
            continue;
        fi
        [ -z "$retlin" ] && retlin="$word" || retlin="$retlin $word"
    done;
    echo "$retlin"
}

parse_file() {
	declare filename=$1
	declare tempfile="./.tempfile"
	# declare hdrend="Head-of-Message"
	declare hdrend="From: "
	declare b_hdrend=false
	declare b_patend=false
	declare b_cmtlog=true
	declare cmtlogend="---"
	declare patend="-- "
	declare mod
	declare lint

	echo $filename
	lint=$(cat $filename | wc -l)
	mod=$(( (lint / tcols) + 1 ))
	> $tempfile

	while IFS= read -r line; do

		# Print dots to the screen in proportion to the file size
		#
		[ $(( lcnt % mod )) -eq 0 ] && echo -n "." && let lcnt++

		# Skip all the cruft at the top of the file until we get to
		# something of substance.
		#
		[[ "${line:0:6}" == "$hdrend" ]] && b_hdrend=true
		$b_hdrend || continue

		if $b_cmtlog; then
			# The patch archive removes dots from email
			# addresses so they can't be farmed, but leaves
			# the angle brackets. This freaks out git am,
			# so just remove any angle brackets in the log.
			#
			# line="${line//[<>]/}"

			[[ "$line" == "Head-of-Message-End" ]] && continue
			[[ "$line" == "Head-Body-Sep-Begin" ]] && continue
			[[ "$line" == "Head-Body-Sep-End"   ]] && continue
			[[ "$line" == "Body-of-Message"     ]] && continue
			[[ "$line" == "$cmtlogend" ]] && b_cmtlog=false
			line=$(fixup_addr "$line")
		fi

		$b_patend || echo "$line" >> $tempfile
		[ "$line" == "$patend" ] && b_patend=true

	done < $filename

	mv -f $tempfile $filename
}



main() {
	declare -i lint			# line total
	declare -i mod			# modulus divisor
	declare -i lcnt			# line counter

	declare hdrend="Head-of-Message"
	declare bdyend="Body-of-Message-End"
	declare b_hdrend
	declare filename
	declare dir
	declare b_start
	declare b_patend
	declare cmtlogend="---"
	declare patend="-- "

        # Trap for control-c
        trap control_c SIGINT

	while getopts h OPTION; do
    	    case "$OPTION" in
		h ) usage
		    let ++optcount
		    ;;
		* ) echo "unrecognized option -$OPTION"
		    echo -e "$usagestr"
		    exit 127
	    esac
	done

	shift $optcount
	[ $# -eq 1 ] || exitme $EXIT_INVARG
	dir=$1
	cd $dir

	for filename in $(find $dir -maxdepth 1 -not -type d -name "*.patch");
	do
		[ $(grep -m1 "Head-of-Message" $filename) ] || continue

		parse_file "$filename"

		# Erase the filename and all the dots and put the cursor back
		# in the first column of the prevous line. Leave them as
		# discrete echos for the sake of clarity. Likely that the bash
		# interpreter will merge them anyway.
		#
		echo -en "$CL1"
		echo -en "$CCR"
		echo -en "$UP1"
		echo -en "$CL1"
		echo -en "$CCR"
	done

	cd -
	exitme $EXIT_OK
}

main $@

exitme $EXIT_OK

